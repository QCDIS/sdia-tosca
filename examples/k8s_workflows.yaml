tosca_definitions_version: tosca_simple_yaml_1_2
description: TOSCA example
imports:
- nodes: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/nodes.yaml
- data: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/data.yml
- capabilities: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/capabilities.yaml
- policies: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/policies.yaml
- interfaces: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/interfaces.yml
topology_template:
  node_templates:
    compute:
      properties:
        disk_size: "40000 MB"
        mem_size: "4000 MB"
        num_cores: 2
        os_distro: "Ubuntu"
        os_version: "18.04"
        user_name: "vm_user"
      interfaces:
        Standard:
          create: "dumy.yaml"
      type: "tosca.nodes.QC.VM.Compute"
    compute_1:
      properties:
        disk_size: "40000 MB"
        mem_size: "4000 MB"
        num_cores: 2
        os_distro: "Ubuntu"
        os_version: "18.04"
        user_name: "vm_user"
      interfaces:
        Standard:
          create: "dumy.yaml"
      type: "tosca.nodes.QC.VM.Compute"
    kubernetes:
      interfaces:
        install_requirements:
          implementation: k8s/install_k8s_prerequisites.yaml
          inputs:
            inventory:
              all:
                children:
                  master:
                    hosts:
                      compute:
                        ansible_host:  { get_attribute: [  compute, public_ip] }
                        ansible_python_interpreter: /usr/bin/python3
                        ansible_ssh_common_args: '"-o StrictHostKeyChecking=no"'
                        ansible_ssh_user: { get_property: [compute, user_name] }
                  workers:
                    hosts:
                      compute_1:
                        ansible_host:  { get_attribute: [  compute_1, public_ip ] }
                        ansible_python_interpreter: /usr/bin/python3
                        ansible_ssh_common_args: '"-o StrictHostKeyChecking=no"'
                        ansible_ssh_user: { get_property: [ compute_1, user_name ] }
            repository: https://github.com/QCDIS/playbooks.git
        create:
          implementation: k8s/install_k8s.yaml
          inputs:
            inventory:
              all:
                children:
                  master:
                    hosts:
                      compute:
                        ansible_host:  { get_attribute: [  compute, public_ip] }
                        ansible_python_interpreter: /usr/bin/python3
                        ansible_ssh_common_args: '"-o StrictHostKeyChecking=no"'
                        ansible_ssh_user: { get_property: [compute, user_name] }
                  workers:
                    hosts:
                      compute_1:
                        ansible_host:  { get_attribute: [  compute_1, public_ip ] }
                        ansible_python_interpreter: /usr/bin/python3
                        ansible_ssh_common_args: '"-o StrictHostKeyChecking=no"'
                        ansible_ssh_user: { get_property: [ compute_1, user_name ] }
            repository: https://github.com/QCDIS/playbooks.git
        configure:
          implementation: k8s/set_master_k8s_cluster.yaml
          repository: https://github.com/QCDIS/playbooks.git
          inputs:
            inventory:
              all:
                children:
                  master:
                    hosts:
                      compute:
                        ansible_host:  { get_attribute: [  compute, public_ip] }
                        ansible_python_interpreter: /usr/bin/python3
                        ansible_ssh_common_args: '"-o StrictHostKeyChecking=no"'
                        ansible_ssh_user: { get_property: [compute, user_name] }
        join_k8s_cluster:
          implementation: k8s/join_k8s_cluster.yaml
          repository: https://github.com/QCDIS/playbooks.git
          inputs:
            inventory:
              all:
                children:
                  master:
                    hosts:
                      compute:
                        ansible_host:  { get_attribute: [  compute, public_ip] }
                        ansible_python_interpreter: /usr/bin/python3
                        ansible_ssh_common_args: '"-o StrictHostKeyChecking=no"'
                        ansible_ssh_user: { get_property: [compute, user_name] }
                  workers:
                    hosts:
                      compute_1:
                        ansible_host:  { get_attribute: [  compute_1, public_ip ] }
                        ansible_python_interpreter: /usr/bin/python3
                        ansible_ssh_common_args: '"-o StrictHostKeyChecking=no"'
                        ansible_ssh_user: { get_property: [ compute_1, user_name ] }
        create_k8s_dashboard:
          implementation: k8s/create_k8s_dashboard.yaml
          repository: https://github.com/QCDIS/playbooks.git
          inputs:
            inventory:
              all:
                children:
                  master:
                    hosts:
                      compute:
                        ansible_host:  { get_attribute: [  compute, public_ip] }
                        ansible_python_interpreter: /usr/bin/python3
                        ansible_ssh_common_args: '"-o StrictHostKeyChecking=no"'
                        ansible_ssh_user: { get_property: [compute, user_name] }
        set_attributes:
          implementation: k8s/get_config.yaml
          repository: https://github.com/QCDIS/playbooks.git
          inputs:
            inventory:
              all:
                children:
                  master:
                    hosts:
                      compute:
                        ansible_host:  { get_attribute: [  compute, public_ip] }
                        ansible_python_interpreter: /usr/bin/python3
                        ansible_ssh_common_args: '"-o StrictHostKeyChecking=no"'
                        ansible_ssh_user: { get_property: [compute, user_name] }

      requirements:
      - host:
          capability: tosca.capabilities.QC.VM.topology
          node: topology
          relationship: tosca.relationships.HostedOn
      type: tosca.nodes.QC.docker.Orchestrator.Kubernetes
    topology:
      properties:
        domain: "Ireland"
        provider: "EC2"
      requirements:
      - vm:
          capability: "tosca.capabilities.QC.VM"
          node: "compute"
          relationship: "tosca.relationships.DependsOn"
      - vm:
          capability: "tosca.capabilities.QC.VM"
          node: "compute_1"
          relationship: "tosca.relationships.DependsOn"
      interfaces:
        CloudsStorm:
          delete:
            inputs:
              code_type: "SEQ"
              object_type: "SubTopology"
          hscale:
            inputs:
              code_type: "SEQ"
              object_type: "SubTopology"
          provision:
            inputs:
              code_type: "SEQ"
              object_type: "SubTopology"
          start:
            inputs:
              code_type: "SEQ"
              object_type: "SubTopology"
          stop:
            inputs:
              code_type: "SEQ"
              object_type: "SubTopology"
        Openstack: {}
      type: "tosca.nodes.QC.VM.topology"

#  workflows:
#    provision:
#      description: Workflow to deploy the k8s
#      steps:
#        ec2_mount:
#          activities:
#          - call_operation: kubernetes.ec2_mount
#          target: kubernetes
#        install_k8s:
#          activities:
#          - call_operation: kubernetes.install_k8s
#          target: kubernetes
#        set_master_k8s_cluster:
#          activities:
#          - set_state: creating
#          - call_operation: kubernetes.set_master_k8s_cluster
#            on_success:
#            - join_k8s_cluster
#            - create_k8s_metrics_server
#            - create_k8s_dashboard
#            - get_config
#          target: kubernetes
#        join_k8s_cluster:
#          activities:
#          - call_operation: kubernetes.join_k8s_cluster
#          target: kubernetes
#        create_k8s_metrics_server:
#          activities:
#          - call_operation: kubernetes.create_k8s_metrics_server
#          target: kubernetes
#        create_k8s_dashboard:
#          activities:
#          - call_operation: kubernetes.create_k8s_dashboard
#          target: kubernetes
#        get_config:
#          activities:
#          - call_operation: kubernetes.get_config
#          - set_state: created
#          target: kubernetes