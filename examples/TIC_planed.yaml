tosca_definitions_version: "tosca_simple_yaml_1_0"
topology_template:
  node_templates:
    compute:
      properties:
        disk_size: "40000 MB"
        mem_size: "4000 MB"
        num_cores: 2
        os_distro: "Ubuntu"
        os_version: "18.04"
        user_name: "vm_user"
      interfaces:
        Standard:
          create: "dumy.yaml"
      type: "tosca.nodes.QC.VM.Compute"
    compute_1:
      properties:
        disk_size: "40000 MB"
        mem_size: "4000 MB"
        num_cores: 2
        os_distro: "Ubuntu"
        os_version: "18.04"
        user_name: "vm_user"
      interfaces:
        Standard:
          create: "dumy.yaml"
      type: "tosca.nodes.QC.VM.Compute"
    glusterfs:
      properties:
        min_masters_num: 1
        min_workers_num: 1
      requirements:
      - host:
          capability: "tosca.capabilities.QC.VM.topology"
          node: "topology"
          relationship: "tosca.relationships.HostedOn"
      interfaces:
        Glusterfs:
          create:
          purge:
            inputs:
              repository: "https://github.com/bityoga/mysome_glusterfs.git"
              implementation: 000.purge.yml
          requirements:
            inputs:
              repository: "https://github.com/bityoga/mysome_glusterfs.git"
              implementation: 001.requirements.yml
          setup_glusterfs_infra:
            inputs:
              repository: "https://github.com/bityoga/mysome_glusterfs.git"
              implementation: 002.setup_glusterfs_infra.yml
          setup_glusterfs_cluster:
            inputs:
              repository: "https://github.com/bityoga/mysome_glusterfs.git"
              implementation: 003.setup_glusterfs_cluster.yml
      type: "tosca.nodes.QC.Application.GlusterFS"
    tic:
      requirements:
      - storage:
          capability: "tosca.capabilities.QC.GlusterFS"
          node: "glusterfs"
          relationship: "tosca.relationships.DependsOn"
      - host:
          capability: "tosca.capabilities.QC.VM.topology"
          node: "topology"
          relationship: "tosca.relationships.HostedOn"
      interfaces:
        TIC:
          initialize_hosts:
            inputs:
              repository: "https://github.com/bityoga/fabric_as_code.git"
              implementation: 011.initialize_hosts.yml
          prepare_docker_images:
            inputs:
              repository: "https://github.com/bityoga/fabric_as_code.git"
              implementation: 012.prepare_docker_images.yml
          mount_fs:
            inputs:
              repository: "https://github.com/bityoga/fabric_as_code.git"
              implementation: 013.mount_fs.yml
          spawn_swarm:
            inputs:
              repository: "https://github.com/bityoga/fabric_as_code.git"
              implementation: 014.spawn_swarm.yml
          deploy_swarm_visualizer:
            inputs:
              repository: "https://github.com/bityoga/fabric_as_code.git"
              implementation: 015.deploy_swarm_visualizer.yml
          deploy_portainer:
            inputs:
              repository: "https://github.com/bityoga/fabric_as_code.git"
              implementation: 016.deploy_portainer.yml
          deploy_ca:
            inputs:
              repository: "https://github.com/bityoga/fabric_as_code.git"
              implementation: 100.deploy_ca.yml
          deploy_orderer:
            inputs:
              repository: "https://github.com/bityoga/fabric_as_code.git"
              implementation: 101.deploy_orderer.yml
          deploy_peers:
            inputs:
              repository: "https://github.com/bityoga/fabric_as_code.git"
              implementation: 102.deploy_peers.yml
          deploy_cli:
            inputs:
              repository: "https://github.com/bityoga/fabric_as_code.git"
              implementation: 103.deploy_cli.yml
          deploy_hlf_explorer:
            inputs:
              repository: "https://github.com/bityoga/fabric_as_code.git"
              implementation: 103.deploy_hlf_explorer.yml
          deploy_bank_app:
            inputs:
              repository: "https://github.com/bityoga/fabric_as_code.git"
              implementation: 103.deploy_bank_app.yml
              extra_variables: https://articonf2.firebaseio.com/user_profile/4NaSde0roaggoel4x0gC9p78czv1/tosca_config.json
      type: "tosca.nodes.QC.Application.TIC"
    topology:
      properties:
        domain: "Ireland"
        provider: "EC2"
      requirements:
      - vm:
          capability: "tosca.capabilities.QC.VM"
          node: "compute"
          relationship: "tosca.relationships.DependsOn"
      - vm:
          capability: "tosca.capabilities.QC.VM"
          node: "compute_1"
          relationship: "tosca.relationships.DependsOn"
      interfaces:
        CloudsStorm:
          delete:
            inputs:
              code_type: "SEQ"
              object_type: "SubTopology"
          hscale:
            inputs:
              code_type: "SEQ"
              object_type: "SubTopology"
          provision:
            inputs:
              code_type: "SEQ"
              object_type: "SubTopology"
          start:
            inputs:
              code_type: "SEQ"
              object_type: "SubTopology"
          stop:
            inputs:
              code_type: "SEQ"
              object_type: "SubTopology"
        Openstack: {}
      type: "tosca.nodes.QC.VM.topology"
      artifacts:
        provisioned_files:
          required: false
          type: "string"
description: "TOSCA example"
imports:
- nodes: "https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/nodes.yaml"
- data: "https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/data.yml"
- capabilities: "https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/capabilities.yaml"
- policies: "https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/policies.yaml"
- interfaces: "https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/interfaces.yml"
