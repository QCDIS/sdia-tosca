tosca_definitions_version: tosca_simple_yaml_1_2
description: TOSCA example
imports:
- nodes: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/nodes.yaml
- data: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/data.yml
- capabilities: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/capabilities.yaml
- policies: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/policies.yaml
- interfaces: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/interfaces.yml
topology_template:
  node_templates:
    compute:
      interfaces:
        Standard:
          create: dummy.yaml
      properties:
        role: master
        assign_public_ip: "yes"
        disk_size: 10 GB
        mem_size: 2048 MB
        num_cores: 2
        os_distro: Ubuntu
        os_version: 18.04
        user_name: vm_user
      type: tosca.nodes.QC.VM.Compute
    compute_1:
      interfaces:
        Standard:
          create: dummy.yaml
      properties:
        role: worker
        assign_public_ip: "yes"
        disk_size: 10 GB
        mem_size: 2048 MB
        num_cores: 1
        os_distro: Ubuntu
        os_version: 18.04
        user_name: vm_user
      type: tosca.nodes.QC.VM.Compute
    topology:
      properties:
        domain: RegionOne
        provider: OpenStack
        auth_url: https://controller.cloud3.uvalight.net:5000/v3/
        project_id: 8ce53a6b695b4f8cb40b7183005c7801
      requirements:
      - vm:
          capability: tosca.capabilities.QC.VM
          node: compute
          relationship: tosca.relationships.DependsOn
      - vm:
          capability: tosca.capabilities.QC.VM
          node: compute_1
          relationship: tosca.relationships.DependsOn
      type: tosca.nodes.QC.VM.topology
      interfaces:
        Openstack:
          create:
            implementation: openstack/server/create_vm.yaml
            inputs:
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      auth_url: { get_property: [ topology, auth_url ]}
                      project_id: { get_property: [ topology, project_id ]}
                      identity_provider: { get_property: [ topology, identity_provider ]}
              repository: https://github.com/QCDIS/openstack_playbooks.git
          create_access_token:
            implementation: authentication/create_access_token.yaml
            inputs:
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      credentials: { get_attribute: [ topology, credentials ] }
              repository: https://github.com/QCDIS/openstack_playbooks.git
          create_ssh_key:
            implementation: key/create_keys.yaml
            inputs:
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      auth_url: { get_property: [ topology, auth_url ] }
                      project_id: { get_property: [ topology, project_id ] }
                      identity_provider: { get_property: [ topology, identity_provider ] }
                      instances:
                        compute:
                          os_distro : { get_property: [ compute, os_distro ]}
                        compute_1:
                          os_distro : { get_property: [ compute, os_distro ]}
              repository: https://github.com/QCDIS/openstack_playbooks.git
          delete_ssh_key:
            implementation: key/delete_keys.yaml
            inputs:
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      auth_url: { get_property: [ topology, auth_url ] }
                      project_id: { get_property: [ topology, project_id ] }
                      identity_provider: { get_property: [ topology, identity_provider ] }
              repository: https://github.com/QCDIS/openstack_playbooks.git
          install_requirements:
            implementation: install_requirements.yaml
            inputs:
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
              repository: https://github.com/QCDIS/openstack_playbooks.git
          select_image:
            implementation: info/get_images.yaml
            inputs:
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      auth_url: { get_property: [ topology, auth_url ] }
                      project_id: { get_property: [ topology, project_id ] }
                      identity_provider: { get_property: [ topology, identity_provider ] }
                      instances:
                        compute:
                          os_distro : { get_property: [ compute, os_distro ]}
                          os_version : { get_property: [ compute, os_version ]}
                        compute_1:
                          os_distro: { get_property: [ compute_1, os_distro ] }
                          os_version: { get_property: [ compute_1, os_version ] }
              repository: https://github.com/QCDIS/openstack_playbooks.git
          select_instance_type:
            implementation: info/get_inst_flavors.yaml
            inputs:
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      auth_url: { get_property: [ topology, auth_url ] }
                      project_id: { get_property: [ topology, project_id ] }
                      identity_provider: { get_property: [ topology, identity_provider ] }
                      instances:
                        compute:
                          disk_size: { get_property: [ compute, disk_size ] }
                          mem_size: { get_property: [ compute, mem_size ] }
                          num_cores: { get_property: [ compute, num_cores ] }
                        compute_1:
                          disk_size: { get_property: [ compute_1, disk_size ] }
                          mem_size: { get_property: [ compute_1, mem_size ] }
                          num_cores: { get_property: [ compute, num_cores ] }
              repository: https://github.com/QCDIS/openstack_playbooks.git
          select_network:
            implementation: info/get_networks.yaml
            inputs:
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      auth_url: { get_property: [ topology, auth_url ] }
                      project_id: { get_property: [ topology, project_id ] }
                      identity_provider: { get_property: [ topology, identity_provider ] }
                      instances:
                        compute:
                          os_distro : { get_property: [ compute, os_distro ]}
                        compute_1:
                          os_distro : { get_property: [ compute, os_distro ]}
              repository: https://github.com/QCDIS/openstack_playbooks.git
          set_attributes:
            implementation: concat_attributes.yaml
            inputs:
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
              repository: https://github.com/QCDIS/openstack_playbooks.git


  workflows:
    provision:
      description: Workflow to deploy the topology
      preconditions:
        - target: topology
          condition:
            - assert:
              - desired_state: [{equal: RUNNING }]
              - current_state: [{equal: UNDEFINED }]
      steps:
        create_access_token:
          activities:
          - call_operation: Openstack.create_access_token
            on_success:
            - select_image
            - select_instance_type
            - select_network
          target: topology
        create_ssh_key:
          activities:
          - call_operation: Openstack.create_ssh_key
            on_success: create_vm
          target: topology
        create_vm:
          activities:
          - call_operation: Openstack.create
            on_failure:
            - delete_ssh_key
            on_success:
            - set_vm_attributes
          target: topology
        delete_ssh_key:
          activities:
          - call_operation: Openstack.delete_ssh_key
          - set_state: failed
          target: topology
        install_requirements:
          activities:
          - set_state: creating
          - call_operation: Openstack.install_requirements
            on_success:
            - create_access_token
          target: topology
        select_image:
          activities:
          - call_operation: Openstack.select_image
            on_success: create_ssh_key
          target: topology
        select_instance_type:
          activities:
          - call_operation: Openstack.select_instance_type
            on_success: create_ssh_key
          target: topology
        select_network:
          activities:
          - call_operation: Openstack.select_network
            on_success: create_ssh_key
          target: topology
        set_vm_attributes:
          activities:
          - call_operation: Openstack.set_attributes
          - set_state: created
          target: topology