tosca_definitions_version: tosca_simple_yaml_1_2
description: TOSCA example
imports:
- nodes: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/nodes.yaml
- data: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/data.yml
- capabilities: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/capabilities.yaml
- policies: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/policies.yaml
- interfaces: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/interfaces.yml
topology_template:
  node_templates:
    compute:
      interfaces:
        Standard:
          create: dummy.yaml
      properties:
        role: master
        assign_public_ip: "yes"
        disk_size: 50000 MB
        mem_size: 4000 MB
        num_cores: 2
        os_distro: Ubuntu
        os_version: 18.04
        user_name: vm_user
      type: tosca.nodes.QC.VM.Compute
    compute_1:
      interfaces:
        Standard:
          create: dummy.yaml
      properties:
        role: worker
        assign_public_ip: "yes"
        disk_size: 50000 MB
        mem_size: 2000 MB
        num_cores: 1
        os_distro: Ubuntu
        os_version: 18.04
        user_name: vm_user
      type: tosca.nodes.QC.VM.Compute
    topology:
      properties:
        domain: eu-west-1
        provider: EC2
      requirements:
      - vm:
          capability: tosca.capabilities.QC.VM
          node: compute
          relationship: tosca.relationships.DependsOn
      - vm:
          capability: tosca.capabilities.QC.VM
          node: compute_1
          relationship: tosca.relationships.DependsOn
      type: tosca.nodes.QC.VM.topology
      interfaces:
        EC2:
          create:
            implementation: vm/create_vms.yaml
            inputs:
              repository: https://github.com/QCDIS/ec2_playbooks.git
              extra_variables:
                region: { get_property: [ topology, domain ] }
                availability_zone: "eu-west-1b"
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      instances:
                        compute:
                          disk_size: { get_property: [ compute, disk_size ] }
                          mem_size: { get_property: [ compute, mem_size ] }
                          num_cores: { get_property: [ compute, num_cores ] }
                          os_distro: { get_property: [ compute, os_distro ] }
                          os_version: { get_property: [ compute, os_version ] }
                          user_name: { get_property: [ compute, user_name ] }
                          role: { get_property: [ compute, role ] }
                          assign_public_ip: { get_property: [ compute, assign_public_ip ] }
                        compute_1:
                          disk_size: { get_property: [ compute_1, disk_size ] }
                          mem_size: { get_property: [ compute_1, mem_size ] }
                          num_cores: { get_property: [ compute_1, num_cores ] }
                          os_distro: { get_property: [ compute_1, os_distro ] }
                          os_version: { get_property: [ compute_1, os_version ] }
                          user_name: { get_property: [ compute_1, user_name ] }
                          role: { get_property: [ compute_1, role ] }
                          assign_public_ip: { get_property: [ compute_1, assign_public_ip ] }
          create_security_group:
            implementation: security_groups.yaml
            inputs:
              repository: https://github.com/QCDIS/ec2_playbooks.git
              extra_variables:
                region: { get_property: [ topology, domain ] }
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
          create_vpc_subnet:
            implementation: network/create_vpc_subnet.yaml
            inputs:
              repository: https://github.com/QCDIS/ec2_playbooks.git
              extra_variables:
                region: { get_property: [ topology, domain ] }
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
          create_vpc:
            implementation: network/create_vpc.yaml
            inputs:
              repository: https://github.com/QCDIS/ec2_playbooks.git
              extra_variables:
                region: { get_property: [ topology, domain ] }
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
          select_instance_type:
            implementation: info/get_inst_flavors.yaml
            inputs:
              extra_variables:
                region: { get_property: [ topology, domain ] }
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      credentials: { get_attribute: [ topology, credentials ] }
                      instances:
                        compute:
                          disk_size: { get_property: [ compute, disk_size ] }
                          mem_size: { get_property: [ compute, mem_size ] }
                          num_cores: { get_property: [ compute, num_cores ] }
                        compute_1:
                          disk_size: { get_property: [ compute_1, disk_size ] }
                          mem_size: { get_property: [ compute_1, mem_size ] }
                          num_cores: { get_property: [ compute_1, num_cores ] }
              repository: https://github.com/QCDIS/ec2_playbooks.git
          select_image:
            implementation: info/get_images.yaml
            inputs:
              repository: https://github.com/QCDIS/ec2_playbooks.git
              extra_variables:
                region: { get_property: [ topology, domain ] }
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      instances:
                        compute:
                          os_distro: { get_property: [ compute, os_distro ] }
                          os_version: { get_property: [ compute, os_version ] }
                        compute_1:
                          os_distro: { get_property: [ compute_1, os_distro ] }
                          os_version: { get_property: [ compute_1, os_version ] }
          create_ssh_key:
            implementation: key/create_keys.yaml
            inputs:
              extra_variables:
                region: { get_property: [ topology, domain ] }
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      instances:
                        compute:
                          os_distro : { get_property: [ compute, os_distro ]}
                        compute_1:
                          os_distro : { get_property: [ compute_1, os_distro ]}
              repository: https://github.com/QCDIS/ec2_playbooks.git
          delete_ssh_key:
            implementation: key/delete_key.yaml
            inputs:
              extra_variables:
                region: { get_property: [ topology, domain ] }
                random_name: { get_attribute: [ compute, random_name ] }
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
              repository: https://github.com/QCDIS/ec2_playbooks.git
          delete:
            implementation: vm/delete_vms.yaml
            inputs:
              extra_variables:
                region: { get_property: [ topology, domain ] }
                random_name: { get_attribute: [ compute, random_name ] }
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      instances:
                        compute:
                          id: { get_attribute: [ compute, id ] }
                        compute_1:
                          id: { get_attribute: [ compute_1, id ] }
              repository: https://github.com/QCDIS/ec2_playbooks.git
          install_requirements:
            implementation: install_requirements.yaml
            inputs:
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
              repository: https://github.com/QCDIS/ec2_playbooks.git
          create_random_name:
            implementation: random_name.yaml
            inputs:
              repository: https://github.com/QCDIS/ec2_playbooks.git
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
          create_user:
            implementation: create_users.yaml
            inputs:
              extra_variables:
                ansible_ssh_user: ubuntu
              repository: https://github.com/QCDIS/ec2_playbooks.git
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      instances:
                        compute:
                          user_name : { get_property: [ compute, user_name ]}
                        compute_1:
                          user_name : { get_property: [ compute_1, user_name ]}
          set_attributes:
            implementation: set_attributes.yaml
            inputs:
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
              repository: https://github.com/QCDIS/ec2_playbooks.git
    nfs:
      properties:
        credential:
          get_attribute:
            - "compute"
            - "user_key_pair"
      requirements:
        - host:
            capability: "tosca.capabilities.QC.VM.topology"
            node: "topology"
            relationship: "tosca.relationships.HostedOn"
      interfaces:
        NFS:
          install:
            implementation: "install_nfs.yaml"
            inputs:
              extra_variables:
                mount_path: "/data/nfs-data"
              inventory:
                all:
                  children:
                    nfs-server:
                      hosts:
                        hlf0:
                          ansible_host:
                            get_attribute:
                              - "compute"
                              - "public_ip"
                          ansible_python_interpreter: "/usr/bin/python3"
                          ansible_ssh_user: "vm_user"
              repository: "https://github.com/QCDIS/nfs_playbooks.git"
          requirements:
            implementation: "install_requirements.yaml"
            inputs:
              inventory:
                all:
                  children:
                    nodes:
                      hosts:
                        hlf1:
                          ansible_host:
                            get_attribute:
                              - "compute_1"
                              - "public_ip"
                          ansible_python_interpreter: "/usr/bin/python3"
                          ansible_ssh_user: "vm_user"
                    nfs-server:
                      hosts:
                        hlf0:
                          ansible_host:
                            get_attribute:
                              - "compute"
                              - "public_ip"
                          ansible_python_interpreter: "/usr/bin/python3"
                          ansible_ssh_user: "vm_user"
              repository: "https://github.com/QCDIS/nfs_playbooks.git"
          set_attributes:
            implementation: "set_attributes.yml"
            inputs:
              inventory:
                all:
                  children:
                    nfs-server:
                      hosts:
                        hlf0:
                          ansible_host:
                            get_attribute:
                              - "compute"
                              - "public_ip"
                          ansible_python_interpreter: "/usr/bin/python3"
                          ansible_ssh_user: "vm_user"
              repository: "https://github.com/QCDIS/nfs_playbooks.git"
      type: "tosca.nodes.QC.Application.NFS"
    kubernetes:
      type: "tosca.nodes.QC.docker.Orchestrator.Kubernetes"
      requirements:
        - host:
            capability: "tosca.capabilities.QC.VM.topology"
            node: "topology"
            relationship: "tosca.relationships.HostedOn"
      properties:
        credential: { get_attribute: [ compute,user_key_pair ] }
      interfaces:
        Kubernetes:
          install_requirements:
            implementation: install_prerequisites.yaml
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
                    worker:
                      ansible_host: { get_attribute: [ compute_1,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute_1,user_name ] }
          install_k8s:
            implementation: install_k8s.yaml
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
                    worker:
                      ansible_host: { get_attribute: [ compute_1,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute_1,user_name ] }
          set_master:
            implementation: set_master_k8s_cluster.yaml
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
          join_k8s_cluster:
            implementation: join_k8s_cluster.yaml
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
                    worker:
                      ansible_host: { get_attribute: [ compute_1,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute_1,user_name ] }
          create_k8s_dashboard:
            implementation: create_k8s_dashboard.yaml
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
          scale:
          autoscale:
          info:
          set_attributes:
            implementation: get_attributes.yaml
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
          create_persistent_volume:
            implementation: create_persistent_volume.yaml
            inputs:
              extra_variables:
                storage_capacity: 10Gi
                local_path: /mnt/disk/vol1
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
                    worker:
                      ansible_host: { get_attribute: [ compute_1,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute_1,user_name ] }
          reset_k8s_cluster:
            implementation: create_persistent_volume.yaml
            inputs:
              extra_variables:
                storage_capacity: 10Gi
                local_path: /mnt/disk/vol1
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
                    worker:
                      ansible_host: { get_attribute: [ compute_1,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute_1,user_name ] }
    ingress:
      interfaces:
        Helm:
          install_chart:
            implementation: install_chart.yaml
            inputs:
              extra_variables:
                chart_name: ingress-nginx/nginx-ingress
                helm_name: ingress-nginx
                namespace: default
                repo_name: ingress-nginx
                repo_url: https://kubernetes.github.io/ingress-nginx
                values:
                  controller:
                    service:
                      type: NodePort
                      nodePorts:
                        http: 32080
                        https: 32443
                        tcp:
                          8080: 32808
                  ingressClassResource:
                    default: true
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host:
                        get_attribute:
                          - compute
                          - public_ip
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user:
                        get_property:
                          - compute
                          - user_name
              repository: https://github.com/QCDIS/helm_playbooks.git
          install_requirements:
            implementation: install_requirements.yaml
            inputs:
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host:
                        get_attribute:
                          - compute
                          - public_ip
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user:
                        get_property:
                          - compute
                          - user_name
              repository: https://github.com/QCDIS/helm_playbooks.git
      properties:
        credential:
          get_attribute:
            - compute
            - user_key_pair
      requirements:
        - kubernetes:
            capability: tosca.capabilities.QC.Kubernetes
            node: kubernetes
            relationship: tosca.relationships.HostedOn
      type: tosca.nodes.QC.Container.Application.Helm
    metrics-server:
      interfaces:
        Helm:
          install_chart:
            implementation: install_chart.yaml
            inputs:
              extra_variables:
                chart_name: metrics-server/bitnami
                helm_name: metrics-server
                namespace: default
                repo_name: bitnami
                repo_url: https://charts.bitnami.com/bitnami
                values:
                  command:
                  - metrics-server
                  - --kubelet-insecure-tls
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host:
                        get_attribute:
                          - compute
                          - public_ip
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user:
                        get_property:
                          - compute
                          - user_name
              repository: https://github.com/QCDIS/helm_playbooks.git
          install_requirements:
            implementation: install_requirements.yaml
            inputs:
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host:
                        get_attribute:
                          - compute
                          - public_ip
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user:
                        get_property:
                          - compute
                          - user_name
              repository: https://github.com/QCDIS/helm_playbooks.git
      properties:
        credential:
          get_attribute:
            - compute
            - user_key_pair
      requirements:
        - kubernetes:
            capability: tosca.capabilities.QC.Kubernetes
            node: kubernetes
            relationship: tosca.relationships.HostedOn
      type: tosca.nodes.QC.Container.Application.Helm
    nfs-provisioner:
      interfaces:
        Helm:
          install_chart:
            implementation: install_chart.yaml
            inputs:
              extra_variables:
                chart_name: nfs-subdir-external-provisioner/nfs-subdir-external-provisioner
                helm_name: nfs-provisioner
                namespace: default
                repo_name: nfs-subdir-external-provisioner
                repo_url: https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/
                values:
                  nfs:
                   server:  { get_attribute: [ compute, public_ip ] }
                   path: /data/nfs-data
                  storageClass:
                   name: nfs
                   defaultClass: true
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host:
                        get_attribute:
                          - compute
                          - public_ip
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user:
                        get_property:
                          - compute
                          - user_name
              repository: https://github.com/QCDIS/helm_playbooks.git
          install_requirements:
            implementation: install_requirements.yaml
            inputs:
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host:
                        get_attribute:
                          - compute
                          - public_ip
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user:
                        get_property:
                          - compute
                          - user_name
              repository: https://github.com/QCDIS/helm_playbooks.git
      properties:
        credential:
          get_attribute:
            - compute
            - user_key_pair
      requirements:
        - kubernetes:
            capability: tosca.capabilities.QC.Kubernetes
            node: kubernetes
            relationship: tosca.relationships.HostedOn
      type: tosca.nodes.QC.Container.Application.Helm
    jupyterhub:
      interfaces:
        Helm:
          install_chart:
            implementation: install_chart.yaml
            inputs:
              extra_variables:
                chart_name: jupyterhub/jupyterhub
                helm_name: jupyterhub
                namespace: default
                repo_name: jupyterhub
                repo_url: https://jupyterhub.github.io/helm-chart/
                values:
                  hub:
                    initContainers:
                      - name: git-clone-templates
                        image: alpine/git
                        args:
                          - clone
                          - --single-branch
                          - --branch=lifeWatch
                          - --depth=1
                          - --
                          - https://github.com/QCDIS/k8s-jhub.git
                          - /etc/jupyterhub/custom
                        securityContext:
                          runAsUser: 0
                        volumeMounts:
                          - name: hub-templates
                            mountPath: /etc/jupyterhub/custom
                      - name: replace-login-path
                        image: busybox:1.28
                        command: ["sh", "-c", "sed -i 's#/VRE_PATH/hub/oauth_login?next=#/n-a-a-vre/hub/oauth_login?next=#' /etc/jupyterhub/custom/templates/login.html"]
                        securityContext:
                          runAsUser: 0
                        volumeMounts:
                          - name: hub-templates
                            mountPath: /etc/jupyterhub/custom
                    extraVolumes:
                      - name: hub-templates
                        emptyDir: { }
                    extraVolumeMounts:
                      - name: hub-templates
                        mountPath: /etc/jupyterhub/custom
                    extraConfig:
                      templates: |
                        c.JupyterHub.template_paths = ['/etc/jupyterhub/custom/templates']
                    concurrentSpawnLimit: 8
                    consecutiveFailureLimit: 8
                    activeServerLimit: 8
                    namedServerLimitPerUser: 1
                    shutdownOnLogout: true
                    extraEnv:
                      OAUTH2_TLS_VERIFY: 'false'
                    baseUrl: /n-a-a-vre
                    config:
                      GenericOAuthenticator:
                        client_id: naa-vre-lifewatch.dev
                        client_secret: rBXXzAZUWXsm83FFpVNXnA7NLf0CDRJw
                        oauth_callback_url: https://lfw-ds001-i022.lifewatch.dev:32443/n-a-a-vre/hub/oauth_callback
                        authorize_url: https://lifewatch.lab.uvalight.net:32443/auth/realms/n-a-a-vre/protocol/openid-connect/auth
                        token_url: https://lifewatch.lab.uvalight.net:32443/auth/realms/n-a-a-vre/protocol/openid-connect/token
                        userdata_url: https://lifewatch.lab.uvalight.net:32443/auth/realms/n-a-a-vre/protocol/openid-connect/userinfo
                        login_service: keycloak
                        username_key: preferred_username
                        userdata_params:
                          state: state
                      JupyterHub:
                        authenticator_class: generic-oauth
                        tornado_settings:
                          headers:
                            Content-Security-Policy: "frame-ancestors 'self' *"
                          cookie_options:
                            SameSite: "None"
                            Secure: "True"
                        tls_verify: false
                  ingress:
                    enabled: true
                    hosts:
                      - lfw-ds001-i022.lifewatch.dev
                    annotations:
                      kubernetes.io/ingress.class: "nginx"
                      nginx.ingress.kubernetes.io/add-base-url: "true"
                      kubernetes.io/tls-acme: "true"
                      nginx.ingress.kubernetes.io/proxy-body-size: "600m"
                      nginx.org/client-max-body-size: "600m"
                    tls:
                      - hosts:
                        - lfw-ds001-i022.lifewatch.dev
                        secretName: lfw-ds001-i022.lifewatch.dev-tls
                  proxy:
                    service:
                      type: ClusterIP
                  singleuser:
                    memory:
                        limit: 1G
                        guarantee: 1G
                    storage:
                        capacity: 0.1Gi
                    cpu:
                      limit: .5
                      guarantee: .5
                    lifecycleHooks:
                      postStart:
                        exec:
                          command:
                            - "sh"
                            - "-c"
                            - >
                              mkdir -p /home/jovyan/examples && cp -r /tmp/notebooks/ /home/jovyan/examples/ && mv /home/jovyan/examples/notebooks/conf_vl_repos.py /home/jovyan/examples/ && mv /home/jovyan/examples/notebooks/README.md /home/jovyan/examples/ && python /home/jovyan/examples/conf_vl_repos.py --force=False --github_url=https://github.com/QCDIS/NaaVRE-container-prestage --github_token=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 --registry_url=https://hub.docker.com/u/qcdis
                    profileList:
                    - display_name: "Laserfarm VL environment"
                      description: "Vitual lab with Laserfarm dependencies installed"
                      kubespawner_override:
                        image: qcdis/n-a-a-vre-laserfarm:v0.1.8-beta
                    - display_name: "MULTIPLY VL environment"
                      description: "Vitual lab with MULTIPLY dependencies installed"
                      kubespawner_override:
                        image: qcdis/n-a-a-vre-multiply:v0.1.8-beta
                    - display_name: "vol2 bird version of VL"
                      description: "Virtual lab with vol2 dependencies installed"
                      kubespawner_override:
                        image: qcdis/n-a-a-vre-vol2bird:v0.1.8-beta
                    - display_name: "Federated learning VL environment"
                      description: "Federated learning VL environment"
                      default: true
                      kubespawner_override:
                        image: qcdis/n-a-a-vre-pytorch:v0.1.8-beta
                    defaultUrl: "/lab"
                    extraEnv:
                      JUPYTERHUB_SINGLEUSER_APP: "jupyter_server.serverapp.ServerApp"
                      MODULE_MAPPING_URL: https://raw.githubusercontent.com/QCDIS/NaaVRE-conf/main/module_mapping.json
                      NAAVRE_API_TOKEN: eyJhbGciOiJSUzI1NiIsImtpZCI6IjRqWGNWSVoyelFMRV9TenZ3a19vYUVvR0pYTkxpdS1CWjlXVHA0RnFQdmcifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJlc3MtMjIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlY3JldC5uYW1lIjoiamVua2lucy10b2tlbi0ybDIyNyIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJqZW5raW5zIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiMzA4OGQ5YmYtMGU4NC00YWRiLTlmYWQtOGNmOGU4ZDgwOGU1Iiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OmVzcy0yMjpqZW5raW5zIn0.SeedbADib5buKfo0ik1QYFMYZfGr6UF6qRHBnd3MZqJtj47eZSu0F5OpBY3x2rr2ipDtZf2AfZLJ5xldMgY0GV0Vtm0B9V1vhI_Hz1KSDSZzuagispq5fkjuyAmNw-holmt08Rbq0t9zUbPFsJJ92ZGfMxsugQc9w0FheXToYv8scfFLKDMD41m5OUqrkvayD76eawA_Hzxs-crxIHFulJR9UCwCnt62JdlEl0U8FshDIXasCthL8_1PPunvK21p7iwGqGifFEYhOdSIX_69B2ztvNhP_HoZQAEzjbYQwdSkqdxF_LnIn0M3nFzXlfZEDAL-8Pyo9JwT1Wj-yqR2jw
                      VLAB_SLUG: n-a-a-vre
                      API_ENDPOINT: https://lfw-ds001-i022.lifewatch.dev:32443/vre-api
                    image:
                      name: qcdis/n-a-a-vre-laserfarm:v0.1.8-beta
                      tag: v0.1.8-beta
                      pullPolicy: Always
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host:
                        get_attribute:
                          - compute
                          - public_ip
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user:
                        get_property:
                          - compute
                          - user_name
              repository: https://github.com/QCDIS/helm_playbooks.git
          install_requirements:
            implementation: install_requirements.yaml
            inputs:
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host:
                        get_attribute:
                          - compute
                          - public_ip
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user:
                        get_property:
                          - compute
                          - user_name
              repository: https://github.com/QCDIS/helm_playbooks.git
      properties:
        credential:
          get_attribute:
            - compute
            - user_key_pair
      requirements:
        - kubernetes:
            capability: tosca.capabilities.QC.Kubernetes
            node: kubernetes
            relationship: tosca.relationships.HostedOn
      type: tosca.nodes.QC.Container.Application.Helm
    keycloak:
      interfaces:
        Helm:
          install_chart:
            implementation: install_chart.yaml
            inputs:
              extra_variables:
                chart_name: bitnami/keycloak
                helm_name: keycloak
                namespace: default
                repo_name: bitnami
                repo_url: https://charts.bitnami.com/bitnami
                values:
                  auth:
                    createAdminUser: true
                    adminPassword: <adminPassword>
                    managementPassword: <managementPassword>
                  service:
                    type: ClusterIP
                  extraEnvVars:
                    - name: KEYCLOAK_PROXY_ADDRESS_FORWARDING
                      value: "true"
                  ingress:
                    annotations:
                      kubernetes.io/ingress.class: nginx
                      nginx.org/server-snippets: |
                        location /auth {
                          proxy_set_header X-Forwarded-For $host;
                          proxy_set_header X-Forwarded-Proto $scheme;
                        }
                    enabled: true
                    path: /auth/
                    hostname: lifewatch.lab.uvalight.net
                    tls: true
                    secrets:
                      - name: lifewatch.lab.uvalight.net-tls
                        certificate: <CERT>
                        key: <KEY>
                  postgresql:
                    enabled: false
                  externalDatabase:
                    host: keycloak-postgresql
                    user: bn_keycloak
                    password: password
                    database: bitnami_keycloak
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host:
                        get_attribute:
                          - compute
                          - public_ip
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user:
                        get_property:
                          - compute
                          - user_name
              repository: https://github.com/QCDIS/helm_playbooks.git
          install_requirements:
            implementation: install_requirements.yaml
            inputs:
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host:
                        get_attribute:
                          - compute
                          - public_ip
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user:
                        get_property:
                          - compute
                          - user_name
              repository: https://github.com/QCDIS/helm_playbooks.git
      properties:
        credential:
          get_attribute:
            - compute
            - user_key_pair
      requirements:
        - kubernetes:
            capability: tosca.capabilities.QC.Kubernetes
            node: kubernetes
            relationship: tosca.relationships.HostedOn
      type: tosca.nodes.QC.Container.Application.Helm
    postgresql:
      interfaces:
        Helm:
          install_chart:
            implementation: install_chart.yaml
            inputs:
              extra_variables:
                chart_name: bitnami/postgresql
                helm_name: keycloak-postgresql
                namespace: default
                repo_name: bitnami
                repo_url: https://charts.bitnami.com/bitnami
                values:
                  image:
                    tag: 14-debian-11
                  global:
                    storageClass: nfs
                    postgresql:
                      auth:
                        username: bn_keycloak
                        password: password
                        database: bitnami_keycloak
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host:
                        get_attribute:
                          - compute
                          - public_ip
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user:
                        get_property:
                          - compute
                          - user_name
              repository: https://github.com/QCDIS/helm_playbooks.git
          install_requirements:
            implementation: install_requirements.yaml
            inputs:
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host:
                        get_attribute:
                          - compute
                          - public_ip
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user:
                        get_property:
                          - compute
                          - user_name
              repository: https://github.com/QCDIS/helm_playbooks.git
      properties:
        credential:
          get_attribute:
            - compute
            - user_key_pair
      requirements:
        - kubernetes:
            capability: tosca.capabilities.QC.Kubernetes
            node: kubernetes
            relationship: tosca.relationships.HostedOn
      type: tosca.nodes.QC.Container.Application.Helm
    argowf:
      interfaces:
        Helm:
          install_chart:
            implementation: install_chart.yaml
            inputs:
              extra_variables:
                chart_name: argo/argo-workflows
                helm_name: argowf
                namespace: default
                repo_name: argo
                repo_url: https://argoproj.github.io/argo-helm
                values:
                  controller:
                    containerRuntimeExecutor: emissary
                  server:
                    extraArgs:
                      - --auth-mode=sso
                    enabled: true
                    baseHref: /argowf/
                    serviceType: ClusterIP
                    #https://github.com/argoproj/argo-workflows/blob/master/docs/argo-server-sso.md
                    sso:
                      issuer: https://lifewatch.lab.uvalight.net:32443/auth/realms/n-a-a-vre
                      sessionExpiry: 240h
                      clientId:
                        name: argo-sso
                        key: client-id-key
                      clientSecret:
                        name: argo-sso
                        key: client-secret-key
                      redirectUrl: https://lifewatch.lab.uvalight.net:32443/argowf/oauth2/callback
                      rbac:
                        enabled: false
                      insecureSkipVerify: false
                    ingress:
                      enabled: true
                      ingressClassName: "nginx"
                      annotations:
                        nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
                        nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
                        nginx.ingress.kubernetes.io/rewrite-target: /$2
                        nginx.ingress.kubernetes.io/add-base-url: "true"
                        nginx.ingress.kubernetes.io/configuration-snippet: |
                          proxy_set_header Accept-Encoding "";
                          sub_filter '<base href="/">' '<base href="/argowf/">';
                          sub_filter_once on;
                      hosts:
                        - lifewatch.lab.uvalight.net
                      paths:
                        - /argowf(/|$)(.*)
                      tls:
                        - hosts:
                            - lifewatch.lab.uvalight.net
                          secretName: lifewatch.lab.uvalight.net-tls
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host:
                        get_attribute:
                          - compute
                          - public_ip
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user:
                        get_property:
                          - compute
                          - user_name
              repository: https://github.com/QCDIS/helm_playbooks.git
          install_requirements:
            implementation: install_requirements.yaml
            inputs:
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host:
                        get_attribute:
                          - compute
                          - public_ip
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user:
                        get_property:
                          - compute
                          - user_name
              repository: https://github.com/QCDIS/helm_playbooks.git
      properties:
        credential:
          get_attribute:
            - compute
            - user_key_pair
      requirements:
        - kubernetes:
            capability: tosca.capabilities.QC.Kubernetes
            node: kubernetes
            relationship: tosca.relationships.HostedOn
      type: tosca.nodes.QC.Container.Application.Helm
    argocd:
      interfaces:
        Helm:
          install_chart:
            implementation: install_chart.yaml
            inputs:
              extra_variables:
                chart_name: argo/argo-cd
                helm_name: argocd
                namespace: default
                repo_name: argo
                repo_url: https://argoproj.github.io/argo-helm
                values:
                  server:
                    service:
                      type: NodePort
                    ingress:
                      enabled: true
                      ingressClassName: "nginx"
                      annotations:
                        nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
                        nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
                        nginx.ingress.kubernetes.io/rewrite-target: /$2
                        nginx.ingress.kubernetes.io/add-base-url: "true"
                        nginx.ingress.kubernetes.io/configuration-snippet: |
                          proxy_set_header Accept-Encoding "";
                          sub_filter '<base href="/">' '<base href="/argocd/">';
                          sub_filter_once on;
                      hosts:
                        - lifewatch.lab.uvalight.net
                      paths:
                        - /argocd(/|$)(.*)
                      tls:
                        - hosts:
                            - lifewatch.lab.uvalight.net
                          secretName: lifewatch.lab.uvalight.net-tls
                      https: true
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host:
                        get_attribute:
                          - compute
                          - public_ip
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user:
                        get_property:
                          - compute
                          - user_name
              repository: https://github.com/QCDIS/helm_playbooks.git
          install_requirements:
            implementation: install_requirements.yaml
            inputs:
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host:
                        get_attribute:
                          - compute
                          - public_ip
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user:
                        get_property:
                          - compute
                          - user_name
              repository: https://github.com/QCDIS/helm_playbooks.git
      properties:
        credential:
          get_attribute:
            - compute
            - user_key_pair
      requirements:
        - kubernetes:
            capability: tosca.capabilities.QC.Kubernetes
            node: kubernetes
            relationship: tosca.relationships.HostedOn
      type: tosca.nodes.QC.Container.Application.Helm
    minio:
      interfaces:
        Helm:
          install_chart:
            implementation: install_chart.yaml
            inputs:
              extra_variables:
                chart_name: bitnami/minio
                helm_name: minio
                namespace: default
                repo_name: minio
                repo_url: https://charts.bitnami.com/bitnami
                values:
                  apiIngress:
                    enabled: true
                    annotations:
                      nginx.ingress.kubernetes.io/proxy-body-size: "0"
                      nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
                      nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
                    ingressClassName: apiingress
                    tls: true
                    selfSigned: false
                    extraTls:
                      - hosts:
                        - lifewatch.lab.uvalight.net
                        secretName: lifewatch.lab.uvalight.net-tls
                    hostname: lfw-ds001-i022.lifewatch.dev
                    path: /
                  ingress:
                    enabled: true
                    annotations:
                      nginx.ingress.kubernetes.io/proxy-body-size: "0"
                      nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
                      nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
                    ingressClassName: consoleingress
                    tls: true
                    selfSigned: false
                    extraTls:
                      - hosts:
                        - lifewatch.lab.uvalight.net
                        secretName: lifewatch.lab.uvalight.net-tls
                    hostname: lfw-ds001-i022.lifewatch.dev
                    path: /
                  persistence:
                    enabled: true
                    size: 5Gi
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host:
                        get_attribute:
                          - compute
                          - public_ip
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user:
                        get_property:
                          - compute
                          - user_name
              repository: https://github.com/QCDIS/helm_playbooks.git
          install_requirements:
            implementation: install_requirements.yaml
            inputs:
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host:
                        get_attribute:
                          - compute
                          - public_ip
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user:
                        get_property:
                          - compute
                          - user_name
              repository: https://github.com/QCDIS/helm_playbooks.git
      properties:
        credential:
          get_attribute:
            - compute
            - user_key_pair
      requirements:
        - kubernetes:
            capability: tosca.capabilities.QC.Kubernetes
            node: kubernetes
            relationship: tosca.relationships.HostedOn
      type: tosca.nodes.QC.Container.Application.Helm
    shared-pvc:
      interfaces:
        Helm:
          install_chart:
            implementation: install_chart.yaml
            inputs:
              extra_variables:
                chart_name: k8s-as-helm/pvc
                helm_name: pvc
                namespace: default
                repo_name: k8s-as-helm
                repo_url: https://ameijer.github.io/k8s-as-helm/
                values:
                  accessModes:
                    - ReadWriteOnce
                  size: 0.1Gi
                  storageClassName: nfs
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host:
                        get_attribute:
                          - compute
                          - public_ip
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user:
                        get_property:
                          - compute
                          - user_name
              repository: https://github.com/QCDIS/helm_playbooks.git
          install_requirements:
            implementation: install_requirements.yaml
            inputs:
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host:
                        get_attribute:
                          - compute
                          - public_ip
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user:
                        get_property:
                          - compute
                          - user_name
              repository: https://github.com/QCDIS/helm_playbooks.git
      properties:
        credential:
          get_attribute:
            - compute
            - user_key_pair
      requirements:
        - kubernetes:
            capability: tosca.capabilities.QC.Kubernetes
            node: kubernetes
            relationship: tosca.relationships.HostedOn
      type: tosca.nodes.QC.Container.Application.Helm

  workflows:
    NaaVRE-deploy:
      description: deploy all
      preconditions:
        - target: topology
          condition:
            - assert:
              - current_state: [{equal: RUNNING }]
        - target: kubernetes
          condition:
            - assert:
              - desired_state: [{equal: RUNNING }]
              - current_state: [{equal: UNDEFINED }]
      steps:
        deploy_nfs-requirements:
          activities:
          - call_operation: NFS.requirements
            on_success: deploy_nfs-install
          target: nfs
        deploy_nfs-install:
          activities:
          - call_operation: NFS.install
            on_success:
            - NaaVRE_jupyterhub_install_heml_requirements
            - deploy_nfs-set-attributes
          target: nfs
        deploy_nfs-set-attributes:
          activities:
          - call_operation: NFS.set_attributes
          - set_state: created
          target: nfs
        NaaVRE_jupyterhub_install_k8s_requirements:
          activities:
          - set_state: CREATING
          - call_operation: Kubernetes.install_requirements
            on_success:
            - NaaVRE_jupyterhub_install_k8s
          target: kubernetes
        NaaVRE_jupyterhub_install_k8s:
          activities:
          - call_operation: Kubernetes.install_k8s
            on_success: NaaVRE_jupyterhub_set_master
          target: kubernetes
        NaaVRE_jupyterhub_set_master:
          activities:
          - call_operation: Kubernetes.set_master
            on_success:
            - deploy_nfs-requirements
            - NaaVRE_jupyterhub_join_k8s_cluster
            - NaaVRE_jupyterhub_create_k8s_dashboard
          target: kubernetes
        NaaVRE_jupyterhub_join_k8s_cluster:
          activities:
          - call_operation: Kubernetes.join_k8s_cluster
            on_success:
              - NaaVRE_jupyterhub_install_ingress
              - NaaVRE_jupyterhub_install_nfs-provisioner
              - NaaVRE_jupyterhub_install_jupyterhub
              - NaaVRE_jupyterhub_install_postgresql
              - NaaVRE_jupyterhub_install_keycloak
          target: kubernetes
        NaaVRE_jupyterhub_install_heml_requirements:
          activities:
          - call_operation: Helm.install_requirements
            on_success:
              - NaaVRE_jupyterhub_install_ingress
              - NaaVRE_jupyterhub_install_nfs-provisioner
              - NaaVRE_jupyterhub_install_jupyterhub
              - NaaVRE_jupyterhub_install_postgresql
              - NaaVRE_jupyterhub_install_keycloak
          target:  jupyterhub
        NaaVRE_jupyterhub_install_jupyterhub:
          activities:
          - call_operation: Helm.install_chart
            on_success: NaaVRE_jupyterhub_set_k8s_attributes
          - set_state: RUNNING
          target: jupyterhub
        NaaVRE_jupyterhub_install_keycloak:
          activities:
          - call_operation: Helm.install_chart
            on_success: NaaVRE_jupyterhub_set_k8s_attributes
          - set_state: RUNNING
          target: keycloak
        NaaVRE_jupyterhub_install_postgresql:
          activities:
          - call_operation: Helm.install_chart
            on_success: NaaVRE_jupyterhub_set_k8s_attributes
          - set_state: RUNNING
          target: postgresql
        NaaVRE_jupyterhub_install_nfs-provisioner:
          activities:
          - call_operation: Helm.install_chart
            on_success: NaaVRE_jupyterhub_set_k8s_attributes
          - set_state: RUNNING
          target: nfs-provisioner
        NaaVRE_jupyterhub_install_ingress:
          activities:
          - call_operation: Helm.install_chart
            on_success: NaaVRE_jupyterhub_set_k8s_attributes
          - set_state: RUNNING
          target: ingress
        NaaVRE_jupyterhub_set_k8s_attributes:
          activities:
          - call_operation: Kubernetes.set_attributes
          target: kubernetes
        NaaVRE_jupyterhub_create_k8s_dashboard:
          activities:
          - call_operation: Kubernetes.create_k8s_dashboard
          target: kubernetes

    ec2_provision:
      description: Workflow to deploy ec2 topology
      preconditions:
        - target: topology
          condition:
            - assert:
              - desired_state: [{equal: RUNNING }]
              - current_state: [{equal: UNDEFINED }]
      steps:
          ec2_install_requirements:
            activities:
            - set_state: CREATING
            - call_operation: EC2.install_requirements
              on_success:
              - ec2_select_instance_type
              - ec2_select_image
              - ec2_create_ssh_key
            target: topology
          ec2_create_random_name:
            activities:
            - call_operation: EC2.create_random_name
              on_success:
              - ec2_select_instance_type
              - ec2_select_image
              - ec2_create_ssh_key
            target: topology
          ec2_select_instance_type:
            activities:
            - set_state: CREATING
            - call_operation: EC2.select_instance_type
              on_success:
                - ec2_create
            target: topology
          ec2_select_image:
            activities:
            - set_state: CREATING
            - call_operation: EC2.select_image
              on_success:
                - ec2_create
            target: topology
          ec2_create_ssh_key:
            activities:
            - set_state: CREATING
            - call_operation: EC2.create_ssh_key
              on_success:
                - ec2_create
            target: topology
          ec2_create:
            activities:
            - call_operation: EC2.create
              on_success:
              - ec2_create_user
            - set_state: RUNNING
            target: topology
          ec2_set_attributes:
            activities:
            - call_operation: EC2.set_attributes
            target: topology
          ec2_create_user:
            activities:
            - call_operation: EC2.create_user
              on_success:
              - ec2_set_attributes
            target: topology

    ec2_delete_topology:
      description: delete_topology
      preconditions:
        - target: topology
          condition:
            - assert:
              - desired_state: [{equal: DELETED }]
              - current_state: [{equal: RUNNING }]
      steps:
        delete:
          activities:
          - set_state: DELETING
          - call_operation: EC2.delete
            on_success:
            - set_attributes
          - set_state: DELETED
          target: topology
        delete_ssh:
          activities:
          - set_state: DELETING
          - call_operation: EC2.delete_ssh_key
            on_success:
            - set_attributes
          target: topology
        set_attributes:
          activities:
          - call_operation: EC2.set_attributes
          target: topology
