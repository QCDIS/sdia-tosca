tosca_definitions_version: tosca_simple_yaml_1_2
description: TOSCA example
imports:
- nodes: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/nodes.yaml
- data: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/data.yml
- capabilities: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/capabilities.yaml
- policies: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/policies.yaml
- interfaces: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/interfaces.yml
topology_template:
  node_templates:
    compute:
      properties:
        role: master
        assign_public_ip: "yes"
        disk_size: "40000 MB"
        mem_size: "4000 MB"
        num_cores: 2
        os_distro: "Ubuntu"
        os_version: "18.04"
        user_name: "vm_user"
      interfaces:
        Standard:
          create: "dummy.yaml"
      type: "tosca.nodes.QC.VM.Compute"
    compute_1:
      properties:
        role: worker
        assign_public_ip: "yes"
        disk_size: "40000 MB"
        mem_size: "4000 MB"
        num_cores: 2
        os_distro: "Ubuntu"
        os_version: "18.04"
        user_name: "vm_user"
      interfaces:
        Standard:
          create: "dummy.yaml"
      type: "tosca.nodes.QC.VM.Compute"
    topology:
      properties:
        domain: eu-west-1
        provider: EC2
      requirements:
      - vm:
          capability: tosca.capabilities.QC.VM
          node: compute
          relationship: tosca.relationships.DependsOn
      - vm:
          capability: tosca.capabilities.QC.VM
          node: compute_1
          relationship: tosca.relationships.DependsOn
      type: tosca.nodes.QC.VM.topology
      interfaces:
        EC2:
          create:
            implementation: vm/create_vms.yaml
            inputs:
              repository: https://github.com/QCDIS/ec2_playbooks.git
              extra_variables:
                region: { get_property: [ topology, domain ] }
                availability_zone: "eu-west-1b"
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      instances:
                        compute:
                          disk_size: { get_property: [ compute, disk_size ] }
                          mem_size: { get_property: [ compute, mem_size ] }
                          num_cores: { get_property: [ compute, num_cores ] }
                          os_distro: { get_property: [ compute, os_distro ] }
                          os_version: { get_property: [ compute, os_version ] }
                          user_name: { get_property: [ compute, user_name ] }
                          role: { get_property: [ compute, role ] }
                          assign_public_ip: { get_property: [ compute, assign_public_ip ] }
                        compute_1:
                          disk_size: { get_property: [ compute_1, disk_size ] }
                          mem_size: { get_property: [ compute_1, mem_size ] }
                          num_cores: { get_property: [ compute_1, num_cores ] }
                          os_distro: { get_property: [ compute_1, os_distro ] }
                          os_version: { get_property: [ compute_1, os_version ] }
                          user_name: { get_property: [ compute_1, user_name ] }
                          role: { get_property: [ compute_1, role ] }
                          assign_public_ip: { get_property: [ compute_1, assign_public_ip ] }
          create_security_group:
            implementation: security_groups.yaml
            inputs:
              repository: https://github.com/QCDIS/ec2_playbooks.git
              extra_variables:
                region: { get_property: [ topology, domain ] }
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
          create_vpc_subnet:
            implementation: network/create_vpc_subnet.yaml
            inputs:
              repository: https://github.com/QCDIS/ec2_playbooks.git
              extra_variables:
                region: { get_property: [ topology, domain ] }
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
          create_vpc:
            implementation: network/create_vpc.yaml
            inputs:
              repository: https://github.com/QCDIS/ec2_playbooks.git
              extra_variables:
                region: { get_property: [ topology, domain ] }
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
          select_instance_type:
            implementation: info/get_inst_flavors.yaml
            inputs:
              extra_variables:
                region: { get_property: [ topology, domain ] }
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      credentials: { get_attribute: [ topology, credentials ] }
                      instances:
                        compute:
                          disk_size: { get_property: [ compute, disk_size ] }
                          mem_size: { get_property: [ compute, mem_size ] }
                          num_cores: { get_property: [ compute, num_cores ] }
                        compute_1:
                          disk_size: { get_property: [ compute_1, disk_size ] }
                          mem_size: { get_property: [ compute_1, mem_size ] }
                          num_cores: { get_property: [ compute_1, num_cores ] }
              repository: https://github.com/QCDIS/ec2_playbooks.git
          select_image:
            implementation: info/get_images.yaml
            inputs:
              repository: https://github.com/QCDIS/ec2_playbooks.git
              extra_variables:
                region: { get_property: [ topology, domain ] }
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      instances:
                        compute:
                          os_distro: { get_property: [ compute, os_distro ] }
                          os_version: { get_property: [ compute, os_version ] }
                        compute_1:
                          os_distro: { get_property: [ compute_1, os_distro ] }
                          os_version: { get_property: [ compute_1, os_version ] }
          create_ssh_key:
            implementation: key/create_keys.yaml
            inputs:
              extra_variables:
                region: { get_property: [ topology, domain ] }
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      instances:
                        compute:
                          os_distro : { get_property: [ compute, os_distro ]}
                        compute_1:
                          os_distro : { get_property: [ compute_1, os_distro ]}
              repository: https://github.com/QCDIS/ec2_playbooks.git
          delete_ssh_key:
            implementation: key/delete_key.yaml
            inputs:
              extra_variables:
                region: { get_property: [ topology, domain ] }
                random_name: { get_attribute: [ compute, random_name ] }
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
              repository: https://github.com/QCDIS/ec2_playbooks.git
          delete:
            implementation: vm/delete_vms.yaml
            inputs:
              extra_variables:
                region: { get_property: [ topology, domain ] }
                random_name: { get_attribute: [ compute, random_name ] }
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      instances:
                        compute:
                          id: { get_attribute: [ compute, id ] }
                        compute_1:
                          id: { get_attribute: [ compute_1, id ] }
              repository: https://github.com/QCDIS/ec2_playbooks.git
          install_requirements:
            implementation: install_requirements.yaml
            inputs:
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
              repository: https://github.com/QCDIS/ec2_playbooks.git
          create_random_name:
            implementation: random_name.yaml
            inputs:
              repository: https://github.com/QCDIS/ec2_playbooks.git
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
          create_user:
            implementation: create_users.yaml
            inputs:
              extra_variables:
                ansible_ssh_user: ubuntu
              repository: https://github.com/QCDIS/ec2_playbooks.git
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      instances:
                        compute:
                          user_name : { get_property: [ compute, user_name ]}
                        compute_1:
                          user_name : { get_property: [ compute_1, user_name ]}
          set_attributes:
            implementation: set_attributes.yaml
            inputs:
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
              repository: https://github.com/QCDIS/ec2_playbooks.git

    kubernetes:
      type: "tosca.nodes.QC.docker.Orchestrator.Kubernetes"
      requirements:
        - host:
            capability: "tosca.capabilities.QC.VM.topology"
            node: "topology"
            relationship: "tosca.relationships.HostedOn"
      properties:
        credential: { get_attribute: [ compute,user_key_pair ] }
      interfaces:
        Kubernetes:
          install_requirements:
            implementation: install_prerequisites.yaml
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
                    worker:
                      ansible_host: { get_attribute: [ compute_1,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute_1,user_name ] }
          install_k8s:
            implementation: install_k8s.yaml
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
                    worker:
                      ansible_host: { get_attribute: [ compute_1,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute_1,user_name ] }
          set_master:
            implementation: set_master_k8s_cluster.yaml
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
          join_k8s_cluster:
            implementation: join_k8s_cluster.yaml
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
                    worker:
                      ansible_host: { get_attribute: [ compute_1,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute_1,user_name ] }
          create_k8s_dashboard:
            implementation: create_k8s_dashboard.yaml
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
          create_k8s_metrics_server:
            implementation: create_k8s_metrics_server.yaml
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
          scale:
          autoscale:
          info:
          set_attributes:
            implementation: get_attributes.yaml
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
    mog:
      type: tosca.nodes.QC.Container.Application.Helm
      properties:
        credential: { get_attribute: [ compute,user_key_pair ] }
      requirements:
        - kubernetes:
            capability: tosca.capabilities.QC.Kubernetes
            node: kubernetes
            relationship: tosca.relationships.HostedOn
      interfaces:
        Helm:
          install_requirements:
            implementation: install_requirements.yaml
            inputs:
              repository: https://github.com/QCDIS/helm_playbooks.git
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
          install_chart:
            implementation: install_chart.yaml
            inputs:
              repository: https://github.com/QCDIS/helm_playbooks.git
              extra_variables:
                chart_name: qcdis/mog-helm-dataservice
                repo_name: qcdis
                repo_url: 'https://qcdis.github.io/mog-helm-dataservice/'
                helm_name: mog
                namespace: default
                values:
                  replicas:
                    controller: 1
                    database: 1
                    resourceManager: 1
                    switcher: 1
                    recorder: 1
                    mediaServer: 1
                    janus: 1
                    switcherflv: 1
                    coturn: 1
                    marketplace: 1
                  features:
                    recorder: false
                    monitoring: false
                    nfs: false
                    ingress: false
                    ingressnotls: true
                  images:
                    repository: registry.gitlab.com/vfilipe/articonf-deployment
                    token:
                    tag: "1.1.2"
                    pullPolicy: IfNotPresent
                    controller: media-controller
                    database: database
                    resourceManager: k8-resource-manager
                    transcoder: transcoder
                    switcher: switcher
                    recorder: media-recorder
                    mediaServer: media-server
                    janus: janus
                    switcherflv: switcher-flv
                    marketplace: marketplace

                    prometheus: prom/prometheus:v2.4.3
                    grafana: grafana/grafana:6.7.2
                    nodeExporter: prom/node-exporter:v0.18.1
                  imagePullSecrets:
                    - name: regcred
                  serviceAccount:
                    create: true
                  services:
                    controller:
                      type: NodePort
                      port1: 80
                      nodeport1: 30003
                      port2: 443

                    marketplace:
                      type: ClusterIP
                      port1: 80

                    resourceManager:
                      type: ClusterIP
                      port: 3000

                    controllerDatabase:
                      type: NodePort
                      port: 5432

                    switcher:
                      type: NodePort
                      port1: 80
                      nodeport1: 30005
                      port2: 1935
                      nodeport2: 30002

                    transcoder:
                      type: ClusterIP
                      port1: 3004

                    janus:
                      type: NodePort
                      udpPortLowerBound: 30010
                      udpPortUpperBound: 30050

                    janusrest:
                      type: NodePort
                      port1: 8088
                      nodeport1: 30007

                    recorder:
                      type: NodePort
                      port1: 5000
                      nodeport1: 30008

                    mediaServer:
                      type: NodePort
                      port1: 9090
                      nodeport1: 30006

                    switcherflv:
                      type: NodePort
                      port1: 81
                      port2: 2935
                      port3: 80
                      nodeport3: 30004
                  ingressnotls:
                    hosts:
                      - path: /webrtc(/|$)(.*)
                        envName: webrtc
                        serviceName: webrtc-internal
                        servicePort: 8088
                      - path: /switcher(/|$)(.*)
                        envName: switcher
                        serviceName: switcher
                        servicePort: 80
                      - path: /switcherflv(/|$)(.*)
                        envName: switcherflv
                        serviceName: switcherflv
                        servicePort: 80
                      - path: /marketplace(/|$)(.*)
                        envName: marketplace
                        serviceName: marketplace
                        servicePort: 80
                      - path: /controller(/|$)(.*)
                        envName: controller
                        serviceName: controller
                        servicePort: 80
                      - path: /*(/|$)(.*)
                        envName: controller
                        serviceName: controller
                        servicePort: 80
                  ingress:
                    domain: mogplay.academy.mog.local
                    hosts:
                      - host: controller
                        envName: controller
                        serviceName: controller
                        servicePort: 80
                      - host: resource-manager
                        envName: resource_manager
                        serviceName: resource-manager
                        servicePort: 3000
                      - host: switcher
                        envName: switcher
                        serviceName:  switcher
                        servicePort:  80
                      - host: switcherflv
                        envName: switcherflv
                        serviceName:  switcherflv
                        servicePort:  80
                      - host: webrtc
                        envName: webrtc
                        serviceName:  webrtc-internal
                        servicePort:  8088
                      - host: media-server
                        envName: media_server
                        serviceName:  media-server
                        servicePort:  9090
                    tls:
                      secret: "mogplay-ingress-tls"
                  master_ip: 10.20.40.207
                  fabric:
                    host: "10.20.155.27"
                    port: 15030
                    network:
                      host: 10.20.40.208
                      nodes:
                        - peer1
                        - peer2
                        - orgca
                        - orderer
                        - tlsca
                  storage:
                      janusRecordings:
                          size: 5Gi
                          name: janus-recordings
                      prometheus:
                          size: 5Gi
                          name: prometheus-storage
                      grafana:
                          size: 1Gi
                          name: grafana-storage
                      blockchainCerts:
                          size: 100Mi
                          name: blockchain-certs
                      postgres:
                          size: 1Gi
                          name: postgres
                      config:
                          size: 100Mi
                          name: config
                      nosignal:
                          size: 2Gi
                          name: nosignal
                  nginx-ingress:
                    controller:
                      service:
                        externalIPs:
                          - "10.20.40.207"
                          - "10.20.40.208"
                          - "10.20.40.201"
                        type: NodePort
                        nodePorts:
                          https: 30001
                        externalTrafficPolicy: Local
                  nfs-client-provisioner:
                    nfs:
                        server: 10.20.40.207
                        path: /nfs
                        replicaCount: 1
                    storageClass:
                        name: nfs-provisioner
                  kube-prometheus-stack:
                    grafana:
                      adminPassword: admin
                      ingress:
                        enabled: false
                        hosts:
                          - grafana.mogplay.academy.mog.local
                        path: /
                        tls:
                          - secretName: mogplay-ingress-tls
                            hosts:
                            - grafana.mogplay.academy.mog.local
                      sidecar:
                        enabled: true
                      service:
                        type: NodePort
                        nodePort: 30009
                    prometheus:
                      prometheusSpec:
                        serviceMonitorSelectorNilUsesHelmValues : false
                      ingress:
                        enabled: true
                        hosts:
                          - prometheus.mogplay.academy.mog.local
                        path: /
                        tls:
                          - secretName: mogplay-ingress-tls
                            hosts:
                            - prometheus.mogplay.academy.mog.local
                    prometheus-operator:
                      namespaces:
                        releaseNamespace: true
                  prometheus-pushgateway:
                    serviceMonitor:
                      enabled: true
                      namespace: articonf
                      additionalLabels:
                        release: articonf
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }


  workflows:
    mog-deploy_k8s:
      description: deploy k8s
      preconditions:
        - target: topology
          condition:
            - assert:
              - current_state: [{equal: RUNNING }]
        - target: kubernetes
          condition:
            - assert:
              - desired_state: [{equal: RUNNING }]
              - current_state: [{equal: UNDEFINED }]
      steps:
        mog_install_k8s_requirements:
          activities:
          - set_state: CREATING
          - call_operation: Kubernetes.install_requirements
            on_success: mog_install_k8s
          target: kubernetes
        mog_install_k8s:
          activities:
          - call_operation: Kubernetes.install_k8s
            on_success: mog_set_master
          target: kubernetes
        mog_set_master:
          activities:
          - call_operation: Kubernetes.set_master
            on_success:
            - mog_join_k8s_cluster
            - mog_install_heml_requirements
            - mog_create_k8s_dashboard
          target: kubernetes
        mog_join_k8s_cluster:
          activities:
          - call_operation: Kubernetes.join_k8s_cluster
            on_success:
              - mog_install_mog
          target: kubernetes
        mog_install_heml_requirements:
          activities:
          - call_operation: Helm.install_requirements
            on_success:
            - mog_install_mog
          target:  mog
        mog_install_mog:
          activities:
          - call_operation: Helm.install_chart
            on_success: mog_set_k8s_attributes
          - set_state: RUNNING
          target:  mog
        mog_create_k8s_dashboard:
          activities:
          - call_operation: Kubernetes.create_k8s_dashboard
            on_success:
            - mog_install_mog
          - set_state: RUNNING
          target: kubernetes
        mog_set_k8s_attributes:
          activities:
          - call_operation: Kubernetes.set_attributes
          target: kubernetes
    mog_ec2_provision:
      description: Workflow to deploy ec2 topology
      preconditions:
        - target: topology
          condition:
            - assert:
              - desired_state: [{equal: RUNNING }]
              - current_state: [{equal: UNDEFINED }]
      steps:
          ec2_install_requirements:
            activities:
            - set_state: CREATING
            - call_operation: EC2.install_requirements
              on_success:
              - ec2_select_instance_type
              - ec2_select_image
              - ec2_create_ssh_key
            target: topology
          ec2_create_random_name:
            activities:
            - call_operation: EC2.create_random_name
              on_success:
              - ec2_select_instance_type
              - ec2_select_image
              - ec2_create_ssh_key
            target: topology
          ec2_select_instance_type:
            activities:
            - set_state: CREATING
            - call_operation: EC2.select_instance_type
              on_success:
                - ec2_create
            target: topology
          ec2_select_image:
            activities:
            - set_state: CREATING
            - call_operation: EC2.select_image
              on_success:
                - ec2_create
            target: topology
          ec2_create_ssh_key:
            activities:
            - set_state: CREATING
            - call_operation: EC2.create_ssh_key
              on_success:
                - ec2_create
            target: topology
          ec2_create:
            activities:
            - call_operation: EC2.create
              on_success:
              - ec2_create_user
            - set_state: RUNNING
            target: topology
          ec2_set_attributes:
            activities:
            - call_operation: EC2.set_attributes
            target: topology
          ec2_create_user:
            activities:
            - call_operation: EC2.create_user
              on_success:
              - ec2_set_attributes
            target: topology
    mog_ec2_delete_topology:
      description: delete_topology
      preconditions:
        - target: topology
          condition:
            - assert:
              - desired_state: [{equal: DELETED }]
              - current_state: [{equal: RUNNING }]
      steps:
        delete:
          activities:
          - set_state: DELETING
          - call_operation: EC2.delete
            on_success:
            - set_attributes
          - set_state: DELETED
          target: topology
        delete_ssh:
          activities:
          - set_state: DELETING
          - call_operation: EC2.delete_ssh_key
            on_success:
            - set_attributes
          target: topology
        set_attributes:
          activities:
          - call_operation: EC2.set_attributes
          target: topology