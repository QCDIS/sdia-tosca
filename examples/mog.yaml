tosca_definitions_version: "tosca_simple_yaml_1_0"
topology_template:
  node_templates:
    compute:
      properties:
        disk_size: "40000 MB"
        mem_size: "4000 MB"
        num_cores: 2
        os_distro: "Ubuntu"
        os_version: "18.04"
        user_name: "vm_user"
      interfaces:
        Standard:
          create: "dumy.yaml"
      type: "tosca.nodes.QC.VM.Compute"

    compute_1:
      properties:
        disk_size: "40000 MB"
        mem_size: "4000 MB"
        num_cores: 2
        os_distro: "Ubuntu"
        os_version: "18.04"
        user_name: "vm_user"
      interfaces:
        Standard:
          create: "dumy.yaml"
      type: "tosca.nodes.QC.VM.Compute"

    glusterfs:
      type: "tosca.nodes.QC.Application.GlusterFS"
      properties:
        min_masters_num: 1
        min_workers_num: 1
        credential: { get_attribute: [ compute,user_key_pair ] }
      requirements:
      - host:
          capability: "tosca.capabilities.QC.VM.topology"
          node: "topology"
          relationship: "tosca.relationships.HostedOn"
      interfaces:
        Glusterfs:
          purge:
            inputs:
              repository: "https://github.com/QCDIS/mysome_glusterfs.git"
              implementation: 000.purge.yml
              extra_variables:
                devmode: False
                device_path: "/dev/xvdh"
                ansible_user: "vm_user"
              inventory:
                all:
                  children:
                    gfscluster:
                      hosts:
                        gfs1:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          ansible_ssh_common_args: '"-o StrictHostKeyChecking=no"'
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                          gluster_mount_server: { get_attribute: [ compute,public_ip ] }
                        gfs2:
                          ansible_host: { get_attribute: [ compute_1,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          ansible_ssh_common_args: '"-o StrictHostKeyChecking=no"'
                          ansible_ssh_user: { get_property: [ compute_1,user_name ] }
                          gluster_mount_server: { get_attribute: [ compute,public_ip ] }
          requirements:
            inputs:
              extra_variables:
                devmode: False
                device_path: "/dev/xvdh"
                ansible_user: "vm_user"
              repository: "https://github.com/QCDIS/mysome_glusterfs.git"
              implementation: 001.requirements.yml
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
          setup_glusterfs_infra:
            inputs:
              repository: "https://github.com/QCDIS/mysome_glusterfs.git"
              implementation: 002.setup_glusterfs_infra.yml
              extra_variables:
                devmode: False
                device_path: "/dev/xvdh"
                ansible_user: "vm_user"
              inventory:
                all:
                  children:
                    gfscluster:
                      hosts:
                        gfs1:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          ansible_ssh_common_args: '"-o StrictHostKeyChecking=no"'
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                          gluster_mount_server: { get_attribute: [ compute,public_ip ] }
                        gfs2:
                          ansible_host: { get_attribute: [ compute_1,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          ansible_ssh_common_args: '"-o StrictHostKeyChecking=no"'
                          ansible_ssh_user: { get_property: [ compute_1,user_name ] }
                          gluster_mount_server: { get_attribute: [ compute,public_ip ] }
          setup_glusterfs_cluster:
            inputs:
              repository: "https://github.com/QCDIS/mysome_glusterfs.git"
              implementation: 003.setup_glusterfs_cluster.yml
              extra_variables:
                devmode: False
                device_path: "/dev/xvdh"
                ansible_user: "vm_user"
              inventory:
                all:
                  children:
                    gfscluster:
                      hosts:
                        gfs1:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          ansible_ssh_common_args: '"-o StrictHostKeyChecking=no"'
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                          gluster_mount_server: { get_attribute: [ compute,public_ip ] }
                        gfs2:
                          ansible_host: { get_attribute: [ compute_1,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          ansible_ssh_common_args: '"-o StrictHostKeyChecking=no"'
                          ansible_ssh_user: { get_property: [ compute_1,user_name ] }
                          gluster_mount_server: { get_attribute: [ compute,public_ip ] }

    tic:
      properties:
        credential: { get_attribute: [ compute,user_key_pair ] }
      type: "tosca.nodes.QC.Application.TIC"
      interfaces:
        TIC:
          initialize_hosts:
            inputs:
              repository: "https://github.com/bityoga/fabric_as_code.git"
              implementation: 011.initialize_hosts.yml
              extra_variables: https://articonf2.firebaseio.com/user_profile/4NaSde0roaggoel4x0gC9p78czv1/tosca_config.json
              inventory:
                all:
                  children:
                    swarm_manager_prime:
                      hosts:
                        hlf0:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                    swarm_managers:
                      hosts:
                        hlf0:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                    swarm_workers:
                      hosts:
                        hlf1:
                          ansible_host: { get_attribute: [ compute_1,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute_1,user_name ] }
          prepare_docker_images:
            inputs:
              repository: "https://github.com/bityoga/fabric_as_code.git"
              implementation: 012.prepare_docker_images.yml
              extra_variables: https://articonf2.firebaseio.com/user_profile/4NaSde0roaggoel4x0gC9p78czv1/tosca_config.json
              inventory:
                all:
                  children:
                    swarm_manager_prime:
                      hosts:
                        hlf0:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                    swarm_managers:
                      hosts:
                        hlf0:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                    swarm_workers:
                      hosts:
                        hlf1:
                          ansible_host: { get_attribute: [ compute_1,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute_1,user_name ] }
          mount_fs:
            inputs:
              repository: "https://github.com/bityoga/fabric_as_code.git"
              implementation: 013.mount_fs.yml
              extra_variables: https://articonf2.firebaseio.com/user_profile/4NaSde0roaggoel4x0gC9p78czv1/tosca_config.json
              inventory:
                all:
                  children:
                    swarm_manager_prime:
                      hosts:
                        hlf0:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                    swarm_managers:
                      hosts:
                        hlf0:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                    swarm_workers:
                      hosts:
                        hlf1:
                          ansible_host: { get_attribute: [ compute_1,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute_1,user_name ] }
          purge_swarm:
            inputs:
              repository: "https://github.com/bityoga/fabric_as_code.git"
              implementation: 014.purge_swarm.yml
              extra_variables: https://articonf2.firebaseio.com/user_profile/4NaSde0roaggoel4x0gC9p78czv1/tosca_config.json
              inventory:
                all:
                  children:
                    swarm_manager_prime:
                      hosts:
                        hlf0:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                    swarm_managers:
                      hosts:
                        hlf0:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                    swarm_workers:
                      hosts:
                        hlf1:
                          ansible_host: { get_attribute: [ compute_1,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute_1,user_name ] }
          set_attributes:
            inputs:
              repository: "https://github.com/QCDIS/fabric_as_code"
              implementation: 106.set_attributes.yml
              inventory:
                all:
                  children:
                    swarm_manager_prime:
                      hosts:
                        hlf0:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
          spawn_swarm:
            inputs:
              repository: "https://github.com/bityoga/fabric_as_code.git"
              implementation: 014.spawn_swarm.yml
              extra_variables: https://articonf2.firebaseio.com/user_profile/4NaSde0roaggoel4x0gC9p78czv1/tosca_config.json
              inventory:
                all:
                  children:
                    swarm_manager_prime:
                      hosts:
                        hlf0:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                    swarm_managers:
                      hosts:
                        hlf0:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                    swarm_workers:
                      hosts:
                        hlf1:
                          ansible_host: { get_attribute: [ compute_1,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute_1,user_name ] }
          deploy_swarm_visualizer:
            inputs:
              repository: "https://github.com/bityoga/fabric_as_code.git"
              implementation: 015.deploy_swarm_visualizer.yml
              extra_variables: https://articonf2.firebaseio.com/user_profile/4NaSde0roaggoel4x0gC9p78czv1/tosca_config.json
              inventory:
                all:
                  children:
                    swarm_manager_prime:
                      hosts:
                        hlf0:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                    swarm_managers:
                      hosts:
                        hlf0:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                    swarm_workers:
                      hosts:
                        hlf1:
                          ansible_host: { get_attribute: [ compute_1,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute_1,user_name ] }
          deploy_portainer:
            inputs:
              repository: "https://github.com/bityoga/fabric_as_code.git"
              implementation: 016.deploy_portainer.yml
              extra_variables: https://articonf2.firebaseio.com/user_profile/4NaSde0roaggoel4x0gC9p78czv1/tosca_config.json
              inventory:
                all:
                  children:
                    swarm_manager_prime:
                      hosts:
                        hlf0:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                    swarm_managers:
                      hosts:
                        hlf0:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                    swarm_workers:
                      hosts:
                        hlf1:
                          ansible_host: { get_attribute: [ compute_1,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute_1,user_name ] }
          deploy_ca:
            inputs:
              repository: "https://github.com/bityoga/fabric_as_code.git"
              implementation: 100.deploy_ca.yml
              extra_variables: https://articonf2.firebaseio.com/user_profile/4NaSde0roaggoel4x0gC9p78czv1/tosca_config.json
              inventory:
                all:
                  children:
                    swarm_manager_prime:
                      hosts:
                        hlf0:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                    swarm_managers:
                      hosts:
                        hlf0:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                    swarm_workers:
                      hosts:
                        hlf1:
                          ansible_host: { get_attribute: [ compute_1,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute_1,user_name ] }
          deploy_orderer:
            inputs:
              repository: "https://github.com/bityoga/fabric_as_code.git"
              implementation: 101.deploy_orderer.yml
              extra_variables: https://articonf2.firebaseio.com/user_profile/4NaSde0roaggoel4x0gC9p78czv1/tosca_config.json
              inventory:
                all:
                  children:
                    swarm_manager_prime:
                      hosts:
                        hlf0:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                    swarm_managers:
                      hosts:
                        hlf0:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                    swarm_workers:
                      hosts:
                        hlf1:
                          ansible_host: { get_attribute: [ compute_1,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute_1,user_name ] }
          deploy_peers:
            inputs:
              repository: "https://github.com/bityoga/fabric_as_code.git"
              implementation: 102.deploy_peers.yml
              extra_variables: https://articonf2.firebaseio.com/user_profile/4NaSde0roaggoel4x0gC9p78czv1/tosca_config.json
              inventory:
                all:
                  children:
                    swarm_manager_prime:
                      hosts:
                        hlf0:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                    swarm_managers:
                      hosts:
                        hlf0:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                    swarm_workers:
                      hosts:
                        hlf1:
                          ansible_host: { get_attribute: [ compute_1,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute_1,user_name ] }
          deploy_cli:
            inputs:
              repository: "https://github.com/bityoga/fabric_as_code.git"
              implementation: 103.deploy_cli.yml
              extra_variables: https://articonf2.firebaseio.com/user_profile/4NaSde0roaggoel4x0gC9p78czv1/tosca_config.json
              inventory:
                all:
                  children:
                    swarm_manager_prime:
                      hosts:
                        hlf0:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                    swarm_managers:
                      hosts:
                        hlf0:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                    swarm_workers:
                      hosts:
                        hlf1:
                          ansible_host: { get_attribute: [ compute_1,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute_1,user_name ] }
          deploy_hlf_explorer:
            inputs:
              repository: "https://github.com/bityoga/fabric_as_code.git"
              implementation: 104.deploy_hlf_explorer.yml
              extra_variables: https://articonf2.firebaseio.com/user_profile/4NaSde0roaggoel4x0gC9p78czv1/tosca_config.json
              inventory:
                all:
                  children:
                    swarm_manager_prime:
                      hosts:
                        hlf0:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                    swarm_managers:
                      hosts:
                        hlf0:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                    swarm_workers:
                      hosts:
                        hlf1:
                          ansible_host: { get_attribute: [ compute_1,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute_1,user_name ] }
          deploy_bank_app:
            inputs:
              repository: "https://github.com/bityoga/fabric_as_code.git"
              implementation: 105.deploy_bank_app.yml
              extra_variables: https://articonf2.firebaseio.com/user_profile/4NaSde0roaggoel4x0gC9p78czv1/tosca_config.json
              inventory:
                all:
                  children:
                    swarm_manager_prime:
                      hosts:
                        hlf0:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                    swarm_managers:
                      hosts:
                        hlf0:
                          ansible_host: { get_attribute: [ compute,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute,user_name ] }
                    swarm_workers:
                      hosts:
                        hlf1:
                          ansible_host: { get_attribute: [ compute_1,public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          gluster_cluster_host0: { get_attribute: [ compute,public_ip ] }
                          gluster_cluster_volume: gfs0
                          ansible_ssh_user: { get_property: [ compute_1,user_name ] }

    topology:
      properties:
        domain: "Ireland"
        provider: "EC2"
      requirements:
      - vm:
          capability: "tosca.capabilities.QC.VM"
          node: "compute"
          relationship: "tosca.relationships.DependsOn"
      - vm:
          capability: "tosca.capabilities.QC.VM"
          node: "compute_1"
          relationship: "tosca.relationships.DependsOn"
      interfaces:
        CloudsStorm:
          delete:
            inputs:
              code_type: "SEQ"
              object_type: "SubTopology"
          hscale:
            inputs:
              code_type: "SEQ"
              object_type: "SubTopology"
          provision:
            inputs:
              code_type: "SEQ"
              object_type: "SubTopology"
          start:
            inputs:
              code_type: "SEQ"
              object_type: "SubTopology"
          stop:
            inputs:
              code_type: "SEQ"
              object_type: "SubTopology"
        Openstack: {}
      type: "tosca.nodes.QC.VM.topology"
      artifacts:
        provisioned_files:
          required: false
          type: "string"


    compute_2:
      properties:
        disk_size: "40000 MB"
        mem_size: "4000 MB"
        num_cores: 2
        os_distro: "Ubuntu"
        os_version: "18.04"
        user_name: "vm_user"
      interfaces:
        Standard:
          create: "dumy.yaml"
      type: "tosca.nodes.QC.VM.Compute"

    compute_3:
      properties:
        disk_size: "40000 MB"
        mem_size: "4000 MB"
        num_cores: 2
        os_distro: "Ubuntu"
        os_version: "18.04"
        user_name: "vm_user"
      interfaces:
        Standard:
          create: "dumy.yaml"
      type: "tosca.nodes.QC.VM.Compute"

    topology_1:
      properties:
        domain: "Ireland"
        provider: "EC2"
      requirements:
      - vm:
          capability: "tosca.capabilities.QC.VM"
          node: "compute_2"
          relationship: "tosca.relationships.DependsOn"
      - vm:
          capability: "tosca.capabilities.QC.VM"
          node: "compute_3"
          relationship: "tosca.relationships.DependsOn"
      interfaces:
        CloudsStorm:
          delete:
            inputs:
              code_type: "SEQ"
              object_type: "SubTopology"
          hscale:
            inputs:
              code_type: "SEQ"
              object_type: "SubTopology"
          provision:
            inputs:
              code_type: "SEQ"
              object_type: "SubTopology"
          start:
            inputs:
              code_type: "SEQ"
              object_type: "SubTopology"
          stop:
            inputs:
              code_type: "SEQ"
              object_type: "SubTopology"
        Openstack: {}
      type: "tosca.nodes.QC.VM.topology"
      artifacts:
        provisioned_files:
          required: false
          type: "string"

    kubernetes:
      type: "tosca.nodes.QC.docker.Orchestrator.Kubernetes"
      requirements:
        - host:
            capability: "tosca.capabilities.QC.VM.topology"
            node: "topology_1"
            relationship: "tosca.relationships.HostedOn"
      properties:
        credential: { get_attribute: [ compute_2,user_key_pair ] }
      interfaces:
        Kubernetes:
          install_requirements:
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              implementation: install_prerequisites.yaml
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute_2,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute_2,user_name ] }
                    worker:
                      ansible_host: { get_attribute: [ compute_3,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute_3,user_name ] }
          install_k8s:
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              implementation: install_k8s.yaml
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute_2,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute_2,user_name ] }
                    worker:
                      ansible_host: { get_attribute: [ compute_3,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute_3,user_name ] }
          set_master:
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              implementation: set_master_k8s_cluster.yaml
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute_2,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute_2,user_name ] }
          join_k8s_cluster:
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              implementation: join_k8s_cluster.yaml
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute_2,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute_2,user_name ] }
                    worker:
                      ansible_host: { get_attribute: [ compute_3,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute_3,user_name ] }
          create_k8s_dashboard:
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              implementation: create_k8s_dashboard.yaml
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute_2,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute_2,user_name ] }
          create_k8s_metrics_server:
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              implementation: create_k8s_metrics_server.yaml
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute_2,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute_2,user_name ] }
          scale:
          autoscale:
          info:
          set_attributes:
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              implementation: get_attributes.yaml
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute_2,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute_2,user_name ] }


  workflows:
    deploy_tic:
      description: Workflow to deploy TIC and MOG
      steps:
        requirements:
          activities:
          - call_operation: Glusterfs.requirements
            on_success: purge
          target: glusterfs
        purge:
          activities:
          - call_operation: Glusterfs.purge
            on_success: setup_glusterfs_infra
          target: glusterfs
        setup_glusterfs_infra:
          activities:
          - call_operation: Glusterfs.setup_glusterfs_infra
            on_success: setup_glusterfs_cluster
          target: glusterfs
        setup_glusterfs_cluster:
          activities:
          - call_operation: Glusterfs.setup_glusterfs_cluster
            on_success: initialize_hosts
          target: glusterfs
        initialize_hosts:
          activities:
          - set_state: creating
          - call_operation: TIC.initialize_hosts
            on_success:
            - mount_fs
          target: tic
        mount_fs:
          activities:
          - call_operation: TIC.mount_fs
            on_success: purge_swarm
          target: tic
        purge_swarm:
          activities:
          - call_operation: TIC.purge_swarm
            on_success: spawn_swarm
          target: tic
        spawn_swarm:
          activities:
          - call_operation: TIC.spawn_swarm
            on_success: deploy_ca
          target: tic
        deploy_swarm_visualizer:
          activities:
          - call_operation: TIC.deploy_swarm_visualizer
            on_success: deploy_cli
          target: tic
        deploy_portainer:
          activities:
          - call_operation: TIC.deploy_portainer
            on_success: deploy_cli
          target: tic
        deploy_ca:
          activities:
          - call_operation: TIC.deploy_ca
            on_success:
              - deploy_orderer
              - deploy_peers
              - deploy_hlf_explorer
              - deploy_swarm_visualizer
              - deploy_portainer
          target: tic
        deploy_orderer:
          activities:
          - call_operation: TIC.deploy_orderer
            on_success: deploy_cli
          target: tic
        deploy_peers:
          activities:
          - call_operation: TIC.deploy_peers
            on_success: deploy_cli
          target: tic
        deploy_cli:
          activities:
          - call_operation: TIC.deploy_cli
            on_success: set_attributes
          target: tic
        deploy_hlf_explorer:
          activities:
          - call_operation: TIC.deploy_hlf_explorer
            on_success: deploy_cli
          target: tic
#        deploy_bank_app:
#          activities:
#          - call_operation: TIC.deploy_bank_app
#            on_success: set_attributes
#          - set_state: created
#          target: tic
        set_attributes:
          activities:
          - call_operation: TIC.set_attributes
          - set_state: created
          target: tic
        install_requirements:
          activities:
          - call_operation: Kubernetes.install_requirements
            on_success: install_k8s
          target: kubernetes
        install_k8s:
          activities:
          - call_operation: Kubernetes.install_k8s
            on_success: set_master
          target: kubernetes
        set_master:
          activities:
          - call_operation: Kubernetes.set_master
            on_success: join_k8s_cluster
          target: kubernetes
        join_k8s_cluster:
          activities:
          - call_operation: Kubernetes.join_k8s_cluster
            on_success:
              - create_k8s_dashboard
              - create_k8s_metrics_server
          target: kubernetes
        create_k8s_dashboard:
          activities:
          - call_operation: Kubernetes.create_k8s_dashboard
            on_success: set_attributes
        create_k8s_metrics_server:
          activities:
          - call_operation: Kubernetes.create_k8s_metrics_server
            on_success: set_attributes
          target: kubernetes
        set_k8s_attributes:
          activities:
          - call_operation: Kubernetes.set_attributes
          target: kubernetes


description: "TOSCA example"
imports:
- nodes: "https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/nodes.yaml"
- data: "https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/data.yml"
- capabilities: "https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/capabilities.yaml"
- policies: "https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/policies.yaml"
- interfaces: "https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/interfaces.yml"

