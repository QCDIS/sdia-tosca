tosca_definitions_version: "tosca_simple_yaml_1_2"
description: "TOSCA example"
imports:
- nodes: "https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/nodes.yaml"
- data: "https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/data.yml"
- capabilities: "https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/capabilities.yaml"
- policies: "https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/policies.yaml"
- interfaces: "https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/interfaces.yml"
topology_template:
  workflows:
    provision:
      description: Workflow to deploy the topology
      steps:
        install_requirements:
          target: topology
          activities:
            - set_state: creating
            - call_operation: Openstack.install_requirements
              on_success:
                - create_access_token
                - select_image
                - select_instance_type
                - select_network
        create_access_token:
          target: topology
          activities:
            - call_operation: Openstack.create_access_token
              on_success: create_key
        select_image:
          target: topology
          activities:
            - call_operation: Openstack.select_image
              on_success: create_key
        select_instance_type:
          target: topology
          activities:
            - call_operation: Openstack.select_instance_type
              on_success: create_key
        select_network:
          target: topology
          activities:
            - call_operation: Openstack.select_network
              on_success: create_key
        create_vm:
          target: topology
          activities:
            - call_operation: Openstack.create
              on_success:
                - set_vm_attributes
        create_key:
          target: topology
          activities:
            - call_operation: Openstack.create_key
              on_success: create
        set_vm_attributes:
          target: [ compute, compute_1 ]
          activities:
            - set_state: created

  node_templates:
    compute:
      properties:
        disk_size: "10 GB"
        mem_size: "2048 MB"
        num_cores: 1
        os:  Ubuntu 18.04
        user_name: "vm_user"
      interfaces:
        Standard:
          create: "dumy.yaml"
      type: "tosca.nodes.QC.VM.Compute"
    compute_1:
      properties:
        disk_size: "10000 MB"
        mem_size: "1024 MB"
        num_cores: 1
        os:  Ubuntu 18.04
        user_name: "vm_user"
      interfaces:
        Standard:
          create: "dumy.yaml"
      type: "tosca.nodes.QC.VM.Compute"

    topology:
      properties:
        domain: "CESGA"
        provider: "EGI"
        auth:
          cloud_provider_name: "CESGA"
          auth_url: 'https://key_stone:35357/v3'
          identity_provider: egi.eu
          project_id: the_project_id
          protocol: the_auth_protocol
          token_type: the_token_type
      attributes:
        credential:
          auth_url: "https://the_open_id_server/oidc/token"
          cloud_provider_name: "EGI"
          identity_provider: "egi.eu"
          user: the_client_id
          keys:
            refresh_token: the_refresh_token
          protocol: "openid"
          token: "the_client_secret"
          token_type: "refresh_token"
      requirements:
      - vm:
          capability: "tosca.capabilities.QC.VM"
          node: "compute"
          relationship: "tosca.relationships.DependsOn"
      - vm:
          capability: "tosca.capabilities.QC.VM"
          node: "compute_1"
          relationship: "tosca.relationships.DependsOn"
      interfaces:
        Openstack:
          install_requirements:
            inputs:
              repository: https://github.com/QCDIS/playbooks.git
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
            implementation: openstack/install_requirements.yaml
          create_access_token:
            inputs:
              repository: https://github.com/QCDIS/playbooks.git
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      os: { get_property: [ compute, os ] }
                      auth: { get_attribute: [ topology, credential ] }
            implementation: openstack/authentication/get_access_token.yaml
          select_image:
            inputs:
              repository: https://github.com/QCDIS/playbooks.git
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      os: { get_property: [ compute, os ] }
                      auth: { get_property: [ topology, auth ] }
            implementation: openstack/info/get_images.yaml
          select_instance_type:
            inputs:
              repository: https://github.com/QCDIS/playbooks.git
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      disk_size: { get_property: [ compute, disk_size ] }
                      mem_size: { get_property: [ compute, mem_size ] }
                      num_cores: { get_property: [ compute, num_cores ] }
                      auth: { get_property: [ topology, auth ] }
            implementation: openstack/info/get_inst_flavors.yaml
          select_network:
            inputs:
              repository: https://github.com/QCDIS/playbooks.git
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      auth: { get_property: [ topology, auth ] }
            implementation: openstack/info/get_networks.yaml
          create_key:
            inputs:
              repository: https://github.com/QCDIS/playbooks.git
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      auth: { get_property: [ topology, auth ] }
            implementation: openstack/key/create_key.yaml
          create:
            inputs:
              repository: https://github.com/QCDIS/playbooks.git
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      auth: { get_property: [ topology, auth ] }
                      image_name: sdia-vm
            implementation: openstack/server/create_vm.yaml
      type: "tosca.nodes.QC.VM.topology"
    kubernetes:
      requirements:
      - host:
          capability: "tosca.capabilities.QC.VM.topology"
          node: "topology"
          relationship: "tosca.relationships.HostedOn"
      interfaces:
        Standard:
          configure:
            implementation: "k8s/create_k8s_dashboard.yaml"
            inputs:
              inventory:
                all:
                  children:
                    master:
                      hosts:
                        compute:
                          ansible_host: { get_attribute: [ compute, public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          ansible_ssh_common_args: '"-o StrictHostKeyChecking=no"'
                          ansible_ssh_user: { get_property: [ compute, user_name ] }
                    workers:
                      hosts:
                        compute_1:
                          ansible_host: { get_attribute: [ compute_1, public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          ansible_ssh_common_args: '"-o StrictHostKeyChecking=no"'
                          ansible_ssh_user: { get_property: [ compute, user_name ] }
              repository: https://github.com/QCDIS/playbooks.git
          create:
            implementation: "k8s/install_k8s.yaml"
            inputs:
              inventory:
                all:
                  children:
                    master:
                      hosts:
                        compute:
                          ansible_host: { get_attribute: [ compute, public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          ansible_ssh_common_args: '"-o StrictHostKeyChecking=no"'
                          ansible_ssh_user: { get_property: [ compute, user_name ] }
                    workers:
                      hosts:
                        compute_1:
                          ansible_host: { get_attribute: [ compute_1, public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          ansible_ssh_common_args: '"-o StrictHostKeyChecking=no"'
                          ansible_ssh_user: { get_property: [ compute, user_name ] }
              repository: https://github.com/QCDIS/playbooks.git
          delete:
            implementation: "k8s/k8s_delete.yaml"
            inputs:
              inventory:
                all:
                  children:
                    master:
                      hosts:
                        compute:
                          ansible_host: { get_attribute: [ compute, public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          ansible_ssh_common_args: '"-o StrictHostKeyChecking=no"'
                          ansible_ssh_user: { get_property: [ compute, user_name ] }
                    workers:
                      hosts:
                        compute_1:
                          ansible_host: { get_attribute: [ compute_1, public_ip ] }
                          ansible_python_interpreter: /usr/bin/python3
                          ansible_ssh_common_args: '"-o StrictHostKeyChecking=no"'
                          ansible_ssh_user: { get_property: [ compute, user_name ] }
              repository: https://github.com/QCDIS/playbooks.git
      type: "tosca.nodes.QC.docker.Orchestrator.Kubernetes"




