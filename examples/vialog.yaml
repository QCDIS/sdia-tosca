tosca_definitions_version: tosca_simple_yaml_1_2
description: TOSCA example
imports:
- nodes: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/nodes.yaml
- data: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/data.yml
- capabilities: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/capabilities.yaml
- policies: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/policies.yaml
- interfaces: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/interfaces.yml
topology_template:
  node_templates:
    compute:
      interfaces:
        Standard:
          create: dumy.yaml
      properties:
        disk_size: 10000 MB
        mem_size: 2048 MB
        num_cores: 2
        os_distro: Ubuntu
        os_version: 18.04
        user_name: vm_user
      type: tosca.nodes.QC.VM.Compute
    compute_1:
      interfaces:
        Standard:
          create: dumy.yaml
      properties:
        disk_size: 10000 MB
        mem_size: 2048 MB
        num_cores: 1
        os_distro: Ubuntu
        os_version: 18.04
        user_name: vm_user
      type: tosca.nodes.QC.VM.Compute
    topology:
      properties:
        domain: "Ireland"
        provider: "EC2"
      requirements:
        - vm:
            capability: "tosca.capabilities.QC.VM"
            node: "compute"
            relationship: "tosca.relationships.DependsOn"
        - vm:
            capability: "tosca.capabilities.QC.VM"
            node: "compute_1"
            relationship: "tosca.relationships.DependsOn"
        - vm:
            capability: "tosca.capabilities.QC.VM"
            node: "compute_2"
            relationship: "tosca.relationships.DependsOn"
        - vm:
            capability: "tosca.capabilities.QC.VM"
            node: "compute_3"
            relationship: "tosca.relationships.DependsOn"
      interfaces:
        CloudsStorm:
          delete:
            inputs:
              code_type: "SEQ"
              object_type: "SubTopology"
          hscale:
            inputs:
              code_type: "SEQ"
              object_type: "SubTopology"
          provision:
            inputs:
              code_type: "SEQ"
              object_type: "SubTopology"
          start:
            inputs:
              code_type: "SEQ"
              object_type: "SubTopology"
          stop:
            inputs:
              code_type: "SEQ"
              object_type: "SubTopology"
        Openstack: { }
      type: "tosca.nodes.QC.VM.topology"
      artifacts:
        provisioned_files:
          required: false
          type: "string"
    kubernetes:
      type: "tosca.nodes.QC.docker.Orchestrator.Kubernetes"
      requirements:
        - host:
            capability: "tosca.capabilities.QC.VM.topology"
            node: "topology"
            relationship: "tosca.relationships.HostedOn"
      properties:
        credential: { get_attribute: [ compute,user_key_pair ] }
      interfaces:
        Kubernetes:
          install_requirements:
            implementation: install_prerequisites.yaml
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
                    worker:
                      ansible_host: { get_attribute: [ compute_1,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute_1,user_name ] }
          install_k8s:
            implementation: install_k8s.yaml
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
                    worker:
                      ansible_host: { get_attribute: [ compute_1,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute_1,user_name ] }
          set_master:
            implementation: set_master_k8s_cluster.yaml
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
          join_k8s_cluster:
            implementation: join_k8s_cluster.yaml
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
                    worker:
                      ansible_host: { get_attribute: [ compute_1,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute_1,user_name ] }
          create_k8s_dashboard:
            implementation: create_k8s_dashboard.yaml
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
          create_k8s_metrics_server:
            implementation: create_k8s_metrics_server.yaml
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
          scale:
          autoscale:
          info:
          set_attributes:
            implementation: get_attributes.yaml
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
    data_service:
      type: tosca.nodes.QC.Container.Application.Helm
      properties:
        credential: { get_attribute: [ compute,user_key_pair ] }
      requirements:
        - kubernetes:
            capability: tosca.capabilities.QC.Kubernetes
            node: kubernetes
            relationship: tosca.relationships.HostedOn
      interfaces:
        Helm:
          install_requirements:
            implementation: install_requirements.yaml
            inputs:
              repository: https://github.com/QCDIS/helm_playbooks.git
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
          install_chart:
            implementation: install_chart.yaml
            inputs:
              repository: https://github.com/QCDIS/helm_playbooks.git
              extra_variables:
                chart_name: qcdis/vialog-helm-dataservice
                repo_name: qcdis
                repo_url: 'https://qcdis.github.io/vialog-helm-dataservice/'
                helm_name: data_service
                namespace: default
                values:
                  alertmanager:
                    enabled: true
                    service:
                      type: ClusterIP
                  prometheusOperator:
                    enabled: true
                    service:
                      type: ClusterIP
                  prometheus:
                    enabled: true
                    service:
                      type: ClusterIP
                  grafana:
                    enabled: true
                    service:
                      type: NodePort
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
    monitoring:
      type: tosca.nodes.QC.Container.Application.Helm
      properties:
        credential: { get_attribute: [ compute,user_key_pair ] }
      requirements:
      - kubernetes:
          capability: tosca.capabilities.QC.Kubernetes
          node: kubernetes
          relationship: tosca.relationships.HostedOn
      interfaces:
        Helm:
          install_requirements:
            implementation: install_requirements.yaml
            inputs:
              repository: https://github.com/QCDIS/helm_playbooks.git
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
          install_chart:
            implementation: install_chart.yaml
            inputs:
              repository: https://github.com/QCDIS/helm_playbooks.git
              extra_variables:
                chart_name: prometheus-community/kube-prometheus-stack
                repo_name: prometheus-community
                repo_url: 'https://prometheus-community.github.io/helm-charts'
                helm_name: monitoring
                namespace: default
                values:
                  alertmanager:
                    enabled: true
                    service:
                      type: ClusterIP
                  prometheusOperator:
                    enabled: true
                    service:
                      type: ClusterIP
                  prometheus:
                    enabled: true
                    service:
                      type: ClusterIP
                  grafana:
                    enabled: true
                    service:
                      type: NodePort
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }


  workflows:
    vialog-deploy_k8s:
      description: deploy k8s
      preconditions:
        - target: topology
          condition:
            - assert:
              - current_state: [{equal: RUNNING }]

        - target: kubernetes
          condition:
            - assert:
              - desired_state: [{equal: RUNNING }]
              - current_state: [{equal: UNDEFINED }]
      steps:
        vialog_install_k8s_requirements:
          activities:
          - set_state: CREATING
          - call_operation: Kubernetes.install_requirements
            on_success: vialog_install_k8s
          target: kubernetes
        vialog_install_k8s:
          activities:
          - call_operation: Kubernetes.install_k8s
            on_success: vialog_set_master
          target: kubernetes
        vialog_set_master:
          activities:
          - call_operation: Kubernetes.set_master
            on_success:
            - vialog_join_k8s_cluster
            - vialog_install_heml_requirements
            - vialog_create_k8s_dashboard
          target: kubernetes
        vialog_join_k8s_cluster:
          activities:
          - call_operation: Kubernetes.join_k8s_cluster
            on_success:
              - vialog_install_data_service
              - vialog_install_monitoring
          target: kubernetes
        vialog_install_heml_requirements:
          activities:
          - call_operation: Helm.install_requirements
            on_success: vialog_install_data_service
          target:  data_service
        vialog_install_data_service:
          activities:
          - call_operation: Helm.install_chart
            on_success: vialog_set_k8s_attributes
          - set_state: RUNNING
          target:  data_service
        vialog_install_monitoring:
          activities:
          - call_operation: Helm.install_chart
            on_success: vialog_set_k8s_attributes
          - set_state: RUNNING
          target:  monitoring
        vialog_create_k8s_dashboard:
          activities:
          - call_operation: Kubernetes.create_k8s_dashboard
            on_success:
            - vialog_install_data_service
          - set_state: RUNNING
          target: kubernetes
        vialog_set_k8s_attributes:
          activities:
          - call_operation: Kubernetes.set_attributes
          target: kubernetes