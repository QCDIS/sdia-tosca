tosca_definitions_version: tosca_simple_yaml_1_2
description: TOSCA example
imports:
- nodes: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/nodes.yaml
- data: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/data.yml
- capabilities: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/capabilities.yaml
- policies: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/policies.yaml
- interfaces: https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/interfaces.yml
topology_template:
  node_templates:
    compute:
      interfaces:
        Standard:
          create: dumy.yaml
      properties:
        disk_size: 10000 MB
        mem_size: 2048 MB
        num_cores: 2
        os_distro: Ubuntu
        os_version: 18.04
        user_name: vm_user
      type: tosca.nodes.QC.VM.Compute
    compute_1:
      interfaces:
        Standard:
          create: dumy.yaml
      properties:
        disk_size: 10000 MB
        mem_size: 2048 MB
        num_cores: 1
        os_distro: Ubuntu
        os_version: 18.04
        user_name: vm_user
      type: tosca.nodes.QC.VM.Compute
    topology:
      properties:
        domain: northeurope
        provider: Azure
      requirements:
      - vm:
          capability: tosca.capabilities.QC.VM
          node: compute
          relationship: tosca.relationships.DependsOn
      - vm:
          capability: tosca.capabilities.QC.VM
          node: compute_1
          relationship: tosca.relationships.DependsOn
      type: tosca.nodes.QC.VM.topology
      interfaces:
        Azure:
          create_resoucre_group:
            implementation: resource_group/create_resource_groups.yaml
            inputs:
              repository: https://github.com/QCDIS/azure_playbooks.git
              extra_variables:
                region: { get_property: [ topology, domain ] }
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      instances:
                        compute:
                          os_distro : { get_property: [ compute, os_distro ]}
                        compute_1:
                          os_distro : { get_property: [ compute, os_distro ]}
          select_image:
            implementation: info/get_images.yaml
            inputs:
              repository: https://github.com/QCDIS/azure_playbooks.git
              extra_variables:
                region: { get_property: [ topology, domain ] }
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      instances:
                        compute:
                          os_distro : { get_property: [ compute, os_distro ]}
                          os_version : { get_property: [ compute, os_version ]}
                        compute_1:
                          os_distro : { get_property: [ compute, os_distro ]}
                          os_version : { get_property: [ compute, os_version ]}
          create:
            implementation: vm/create_vms.yaml
            inputs:
              extra_variables:
                region: { get_property: [ topology, domain ] }
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      instances:
                        compute:
                          user_name: { get_property: [ compute, user_name ] }
                          os_distro: { get_property: [ compute, os_distro ] }
                          os_version: { get_property: [ compute_1, os_version ] }
                        compute_1:
                          user_name: { get_property: [ compute_1, user_name ] }
                          os_distro: { get_property: [ compute, os_distro ] }
                          os_version: { get_property: [ compute_1, os_version ] }
              repository: https://github.com/QCDIS/azure_playbooks.git
          create_ssh_key:
            implementation: key/create_keys.yaml
            inputs:
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      instances:
                        compute:
                          os_distro : { get_property: [ compute, os_distro ]}
                        compute_1:
                          os_distro : { get_property: [ compute, os_distro ]}
              repository: https://github.com/QCDIS/azure_playbooks.git
          delete_ssh_key:
            implementation: key/delete_keys.yaml
            inputs:
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
              repository: https://github.com/QCDIS/azure_playbooks.git
          install_requirements:
            implementation: install_requirements.yaml
            inputs:
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
              repository: https://github.com/QCDIS/azure_playbooks.git
          select_instance_type:
            implementation: info/get_inst_flavors.yaml
            inputs:
              extra_variables:
                region: { get_property: [ topology, domain ] }
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      credentials: { get_attribute: [ topology, credentials ] }
                      instances:
                        compute:
                          disk_size: { get_property: [ compute, disk_size ] }
                          mem_size: { get_property: [ compute, mem_size ] }
                          num_cores: { get_property: [ compute, num_cores ] }
                        compute_1:
                          disk_size: { get_property: [ compute_1, disk_size ] }
                          mem_size: { get_property: [ compute_1, mem_size ] }
                          num_cores: { get_property: [ compute, num_cores ] }
              repository: https://github.com/QCDIS/azure_playbooks.git
          select_network:
            implementation: network/create_network_interfaces.yaml
            inputs:
              extra_variables:
                region: { get_property: [ topology, domain ] }
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      instances:
                        compute:
                          os_distro : { get_property: [ compute, os_distro ]}
                        compute_1:
                          os_distro : { get_property: [ compute, os_distro ]}
              repository: https://github.com/QCDIS/azure_playbooks.git
          set_attributes:
            implementation: set_attributes.yaml
            inputs:
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
              repository: https://github.com/QCDIS/azure_playbooks.git

    kubernetes:
      type: "tosca.nodes.QC.docker.Orchestrator.Kubernetes"
      requirements:
        - host:
            capability: "tosca.capabilities.QC.VM.topology"
            node: "topology"
            relationship: "tosca.relationships.HostedOn"
      properties:
        credential: { get_attribute: [ compute,user_key_pair ] }
      interfaces:
        Kubernetes:
          install_requirements:
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              implementation: install_prerequisites.yaml
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
                    worker:
                      ansible_host: { get_attribute: [ compute_1,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute_1,user_name ] }
          install_k8s:
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              implementation: install_k8s.yaml
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
                    worker:
                      ansible_host: { get_attribute: [ compute_1,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute_1,user_name ] }
          set_master:
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              implementation: set_master_k8s_cluster.yaml
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
          join_k8s_cluster:
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              implementation: join_k8s_cluster.yaml
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
                    worker:
                      ansible_host: { get_attribute: [ compute_1,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute_1,user_name ] }
          create_k8s_dashboard:
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              implementation: create_k8s_dashboard.yaml
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
          create_k8s_metrics_server:
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              implementation: create_k8s_metrics_server.yaml
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }
          scale:
          autoscale:
          info:
          set_attributes:
            inputs:
              repository: "https://github.com/QCDIS/k8s_playbooks.git"
              implementation: get_attributes.yaml
              inventory:
                all:
                  hosts:
                    master:
                      ansible_host: { get_attribute: [ compute,public_ip ] }
                      ansible_python_interpreter: /usr/bin/python3
                      ansible_ssh_user: { get_property: [ compute,user_name ] }



  workflows:
    provision:
      description: Workflow to deploy azure topology
      steps:
        install_requirements:
          activities:
          - call_operation: Azure.install_requirements
            on_success:
            - create_resoucre_group
          target: topology
        create_resoucre_group:
          activities:
          - call_operation: Azure.create_resoucre_group
            on_success:
            - select_instance_type
            - select_network
            - create_ssh_key
            - select_image
          target: topology
        select_instance_type:
          activities:
          - call_operation: Azure.select_instance_type
            on_success:
            - create
          target: topology
        select_network:
          activities:
          - call_operation: Azure.select_network
            on_success:
            - create
          target: topology
        create_ssh_key:
          activities:
          - call_operation: Azure.create_ssh_key
            on_success:
            - create
          target: topology
        select_image:
          activities:
            - call_operation: Azure.select_image
              on_success:
                - create
          target: topology
        create:
          activities:
          - call_operation: Azure.create
            on_success:
            - set_attributes
          target: topology
        set_attributes:
          activities:
          - call_operation: Azure.set_attributes
          target: topology



