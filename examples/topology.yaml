tosca_definitions_version: "tosca_simple_yaml_1_2"
description: "TOSCA example"
imports:
- nodes: "https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/nodes.yaml"
- data: "https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/data.yml"
- capabilities: "https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/capabilities.yaml"
- policies: "https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/policies.yaml"
- interfaces: "https://raw.githubusercontent.com/qcdis-sdia/sdia-tosca/master/types/interfaces.yml"
topology_template:

  node_templates:
    compute:
      properties:
        role: master
        assign_public_ip: "yes"
        disk_size: "10 GB"
        mem_size: "2048 MB"
        num_cores: 1
        os_distro: Ubuntu
        os_version: 18.04
        user_name: "vm_user"
      interfaces:
        Standard:
          create: "dummy.yaml"
      type: "tosca.nodes.QC.VM.Compute"
    compute_1:
      properties:
        role: worker
        assign_public_ip: "yes"
        disk_size: "10000 MB"
        mem_size: "1024 MB"
        num_cores: 1
        os_distro: Ubuntu
        os_version: 18.04
        user_name: "vm_user"
      interfaces:
        Standard:
          create: "dummy.yaml"
      type: "tosca.nodes.QC.VM.Compute"

    topology:
      properties:
        domain: "CESGA"
        provider: "EGI"
      attributes:
        credential:
          auth_url: "https://the_open_id_server/oidc/token"
          cloud_provider_name: "EGI"
          identity_provider: "egi.eu"
          user: the_client_id
          keys:
            refresh_token: the_refresh_token
          protocol: "openid"
          token: "the_client_secret"
          token_type: "refresh_token"
      requirements:
      - vm:
          capability: "tosca.capabilities.QC.VM"
          node: "compute"
          relationship: "tosca.relationships.DependsOn"
      - vm:
          capability: "tosca.capabilities.QC.VM"
          node: "compute_1"
          relationship: "tosca.relationships.DependsOn"
      interfaces:
        Openstack:
          install_requirements:
            inputs:
              repository: https://github.com/QCDIS/playbooks.git
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
            implementation: openstack/install_requirements.yaml
          create_access_token:
            inputs:
              repository: https://github.com/QCDIS/playbooks.git
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      os_distro: { get_property: [ compute, os_distro ] }
                      os_version: { get_property: [ compute, os_version ] }
                      auth_url: { get_property: [ topology, auth_url ]}
            implementation: openstack/authentication/create_access_token.yaml
          select_image:
            inputs:
              repository: https://github.com/QCDIS/playbooks.git
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      os_distro: { get_property: [ compute, os_distro ] }
                      os_version: { get_property: [ compute, os_version ] }
                      auth_url: { get_property: [ topology, auth_url ]}
            implementation: openstack/info/get_images.yaml
          select_instance_type:
            inputs:
              repository: https://github.com/QCDIS/playbooks.git
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      disk_size: { get_property: [ compute, disk_size ] }
                      mem_size: { get_property: [ compute, mem_size ] }
                      num_cores: { get_property: [ compute, num_cores ] }
                      auth_url: { get_property: [ topology, auth_url ]}
            implementation: openstack/info/get_inst_flavors.yaml
          select_network:
            inputs:
              repository: https://github.com/QCDIS/playbooks.git
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      auth_url: { get_property: [ topology, auth_url ]}
            implementation: openstack/info/get_networks.yaml
          create_ssh_key:
            inputs:
              repository: https://github.com/QCDIS/playbooks.git
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      auth_url: { get_property: [ topology, auth_url ]}
            implementation: openstack/key/create_key.yaml
          create:
            inputs:
              repository: https://github.com/QCDIS/playbooks.git
              inventory:
                all:
                  hosts:
                    localhost:
                      ansible_connection: local
                      auth_url: { get_property: [ topology, auth_url ]}
                      image_name: sdia-vm
            implementation: openstack/server/create_vm.yaml
      type: "tosca.nodes.QC.VM.topology"